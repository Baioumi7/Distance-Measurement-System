
Distance-Measurement-System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00004280  00004314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080007c  0080007c  00004330  2**0
                  ALLOC
  3 .stab         00003378  00000000  00000000  00004330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001498  00000000  00000000  000076a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ae74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bf75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d33a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__vector_3>
      10:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__vector_4>
      14:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__vector_5>
      18:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__vector_10>
      2c:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 20 	call	0x4086	; 0x4086 <main>
      8a:	0c 94 3e 21 	jmp	0x427c	; 0x427c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 20 	jmp	0x41e4	; 0x41e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 20 	jmp	0x41e4	; 0x41e4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e7       	ldi	r22, 0x74	; 116
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fa 20 	jmp	0x41f4	; 0x41f4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <CLCD_voidSendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	c3 56       	subi	r28, 0x63	; 99
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	fe 01       	movw	r30, r28
     cba:	ed 59       	subi	r30, 0x9D	; 157
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_LOW); /* Instruction Mode RS=0 */
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
     cd4:	fe 01       	movw	r30, r28
     cd6:	e1 5a       	subi	r30, 0xA1	; 161
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e8       	ldi	r26, 0x80	; 128
     ce0:	bf e3       	ldi	r27, 0x3F	; 63
     ce2:	80 83       	st	Z, r24
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	a2 83       	std	Z+2, r26	; 0x02
     ce8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cea:	8e 01       	movw	r16, r28
     cec:	05 5a       	subi	r16, 0xA5	; 165
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	e1 5a       	subi	r30, 0xA1	; 161
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	4a ef       	ldi	r20, 0xFA	; 250
     d04:	54 e4       	ldi	r21, 0x44	; 68
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	f8 01       	movw	r30, r16
     d10:	80 83       	st	Z, r24
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	a2 83       	std	Z+2, r26	; 0x02
     d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d18:	fe 01       	movw	r30, r28
     d1a:	e5 5a       	subi	r30, 0xA5	; 165
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	44 f4       	brge	.+16     	; 0xd46 <CLCD_voidSendCommand+0xa8>
		__ticks = 1;
     d36:	fe 01       	movw	r30, r28
     d38:	e7 5a       	subi	r30, 0xA7	; 167
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
     d44:	64 c0       	rjmp	.+200    	; 0xe0e <CLCD_voidSendCommand+0x170>
	else if (__tmp > 65535)
     d46:	fe 01       	movw	r30, r28
     d48:	e5 5a       	subi	r30, 0xA5	; 165
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	3f ef       	ldi	r19, 0xFF	; 255
     d58:	4f e7       	ldi	r20, 0x7F	; 127
     d5a:	57 e4       	ldi	r21, 0x47	; 71
     d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d60:	18 16       	cp	r1, r24
     d62:	0c f0       	brlt	.+2      	; 0xd66 <CLCD_voidSendCommand+0xc8>
     d64:	43 c0       	rjmp	.+134    	; 0xdec <CLCD_voidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d66:	fe 01       	movw	r30, r28
     d68:	e1 5a       	subi	r30, 0xA1	; 161
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e2       	ldi	r20, 0x20	; 32
     d7a:	51 e4       	ldi	r21, 0x41	; 65
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	8e 01       	movw	r16, r28
     d86:	07 5a       	subi	r16, 0xA7	; 167
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	bc 01       	movw	r22, r24
     d8c:	cd 01       	movw	r24, r26
     d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	f8 01       	movw	r30, r16
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
     d9c:	1f c0       	rjmp	.+62     	; 0xddc <CLCD_voidSendCommand+0x13e>
     d9e:	fe 01       	movw	r30, r28
     da0:	e9 5a       	subi	r30, 0xA9	; 169
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	88 ec       	ldi	r24, 0xC8	; 200
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dac:	fe 01       	movw	r30, r28
     dae:	e9 5a       	subi	r30, 0xA9	; 169
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <CLCD_voidSendCommand+0x118>
     dba:	fe 01       	movw	r30, r28
     dbc:	e9 5a       	subi	r30, 0xA9	; 169
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc4:	de 01       	movw	r26, r28
     dc6:	a7 5a       	subi	r26, 0xA7	; 167
     dc8:	bf 4f       	sbci	r27, 0xFF	; 255
     dca:	fe 01       	movw	r30, r28
     dcc:	e7 5a       	subi	r30, 0xA7	; 167
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	9c 93       	st	X, r25
     dda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ddc:	fe 01       	movw	r30, r28
     dde:	e7 5a       	subi	r30, 0xA7	; 167
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	d1 f6       	brne	.-76     	; 0xd9e <CLCD_voidSendCommand+0x100>
     dea:	27 c0       	rjmp	.+78     	; 0xe3a <CLCD_voidSendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dec:	8e 01       	movw	r16, r28
     dee:	07 5a       	subi	r16, 0xA7	; 167
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	fe 01       	movw	r30, r28
     df4:	e5 5a       	subi	r30, 0xA5	; 165
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	60 81       	ld	r22, Z
     dfa:	71 81       	ldd	r23, Z+1	; 0x01
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	93 81       	ldd	r25, Z+3	; 0x03
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	f8 01       	movw	r30, r16
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	de 01       	movw	r26, r28
     e10:	ab 5a       	subi	r26, 0xAB	; 171
     e12:	bf 4f       	sbci	r27, 0xFF	; 255
     e14:	fe 01       	movw	r30, r28
     e16:	e7 5a       	subi	r30, 0xA7	; 167
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	8d 93       	st	X+, r24
     e20:	9c 93       	st	X, r25
     e22:	fe 01       	movw	r30, r28
     e24:	eb 5a       	subi	r30, 0xAB	; 171
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <CLCD_voidSendCommand+0x18e>
     e30:	fe 01       	movw	r30, r28
     e32:	eb 5a       	subi	r30, 0xAB	; 171
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
     e44:	fe 01       	movw	r30, r28
     e46:	ef 5a       	subi	r30, 0xAF	; 175
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e8       	ldi	r26, 0x80	; 128
     e50:	bf e3       	ldi	r27, 0x3F	; 63
     e52:	80 83       	st	Z, r24
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	a2 83       	std	Z+2, r26	; 0x02
     e58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5a:	8e 01       	movw	r16, r28
     e5c:	03 5b       	subi	r16, 0xB3	; 179
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	fe 01       	movw	r30, r28
     e62:	ef 5a       	subi	r30, 0xAF	; 175
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	60 81       	ld	r22, Z
     e68:	71 81       	ldd	r23, Z+1	; 0x01
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	93 81       	ldd	r25, Z+3	; 0x03
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4a ef       	ldi	r20, 0xFA	; 250
     e74:	54 e4       	ldi	r21, 0x44	; 68
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e88:	fe 01       	movw	r30, r28
     e8a:	e3 5b       	subi	r30, 0xB3	; 179
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	44 f4       	brge	.+16     	; 0xeb6 <CLCD_voidSendCommand+0x218>
		__ticks = 1;
     ea6:	fe 01       	movw	r30, r28
     ea8:	e5 5b       	subi	r30, 0xB5	; 181
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
     eb4:	64 c0       	rjmp	.+200    	; 0xf7e <CLCD_voidSendCommand+0x2e0>
	else if (__tmp > 65535)
     eb6:	fe 01       	movw	r30, r28
     eb8:	e3 5b       	subi	r30, 0xB3	; 179
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	0c f0       	brlt	.+2      	; 0xed6 <CLCD_voidSendCommand+0x238>
     ed4:	43 c0       	rjmp	.+134    	; 0xf5c <CLCD_voidSendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	fe 01       	movw	r30, r28
     ed8:	ef 5a       	subi	r30, 0xAF	; 175
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e2       	ldi	r20, 0x20	; 32
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8e 01       	movw	r16, r28
     ef6:	05 5b       	subi	r16, 0xB5	; 181
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	f8 01       	movw	r30, r16
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
     f0c:	1f c0       	rjmp	.+62     	; 0xf4c <CLCD_voidSendCommand+0x2ae>
     f0e:	fe 01       	movw	r30, r28
     f10:	e7 5b       	subi	r30, 0xB7	; 183
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	88 ec       	ldi	r24, 0xC8	; 200
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
     f1c:	fe 01       	movw	r30, r28
     f1e:	e7 5b       	subi	r30, 0xB7	; 183
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	80 81       	ld	r24, Z
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <CLCD_voidSendCommand+0x288>
     f2a:	fe 01       	movw	r30, r28
     f2c:	e7 5b       	subi	r30, 0xB7	; 183
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	de 01       	movw	r26, r28
     f36:	a5 5b       	subi	r26, 0xB5	; 181
     f38:	bf 4f       	sbci	r27, 0xFF	; 255
     f3a:	fe 01       	movw	r30, r28
     f3c:	e5 5b       	subi	r30, 0xB5	; 181
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	11 96       	adiw	r26, 0x01	; 1
     f48:	9c 93       	st	X, r25
     f4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4c:	fe 01       	movw	r30, r28
     f4e:	e5 5b       	subi	r30, 0xB5	; 181
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	d1 f6       	brne	.-76     	; 0xf0e <CLCD_voidSendCommand+0x270>
     f5a:	27 c0       	rjmp	.+78     	; 0xfaa <CLCD_voidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5c:	8e 01       	movw	r16, r28
     f5e:	05 5b       	subi	r16, 0xB5	; 181
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	fe 01       	movw	r30, r28
     f64:	e3 5b       	subi	r30, 0xB3	; 179
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	f8 01       	movw	r30, r16
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
     f7e:	de 01       	movw	r26, r28
     f80:	a9 5b       	subi	r26, 0xB9	; 185
     f82:	bf 4f       	sbci	r27, 0xFF	; 255
     f84:	fe 01       	movw	r30, r28
     f86:	e5 5b       	subi	r30, 0xB5	; 181
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	8d 93       	st	X+, r24
     f90:	9c 93       	st	X, r25
     f92:	fe 01       	movw	r30, r28
     f94:	e9 5b       	subi	r30, 0xB9	; 185
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <CLCD_voidSendCommand+0x2fe>
     fa0:	fe 01       	movw	r30, r28
     fa2:	e9 5b       	subi	r30, 0xB9	; 185
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */



#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 4));
     faa:	fe 01       	movw	r30, r28
     fac:	ed 59       	subi	r30, 0x9D	; 157
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 81       	ld	r24, Z
     fb2:	82 95       	swap	r24
     fb4:	8f 70       	andi	r24, 0x0F	; 15
     fb6:	98 2f       	mov	r25, r24
     fb8:	91 70       	andi	r25, 0x01	; 1
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	63 e0       	ldi	r22, 0x03	; 3
     fbe:	49 2f       	mov	r20, r25
     fc0:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 5));
     fc4:	fe 01       	movw	r30, r28
     fc6:	ed 59       	subi	r30, 0x9D	; 157
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	82 95       	swap	r24
     fce:	86 95       	lsr	r24
     fd0:	87 70       	andi	r24, 0x07	; 7
     fd2:	98 2f       	mov	r25, r24
     fd4:	91 70       	andi	r25, 0x01	; 1
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	64 e0       	ldi	r22, 0x04	; 4
     fda:	49 2f       	mov	r20, r25
     fdc:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 6));
     fe0:	fe 01       	movw	r30, r28
     fe2:	ed 59       	subi	r30, 0x9D	; 157
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	80 81       	ld	r24, Z
     fe8:	82 95       	swap	r24
     fea:	86 95       	lsr	r24
     fec:	86 95       	lsr	r24
     fee:	83 70       	andi	r24, 0x03	; 3
     ff0:	98 2f       	mov	r25, r24
     ff2:	91 70       	andi	r25, 0x01	; 1
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	65 e0       	ldi	r22, 0x05	; 5
     ff8:	49 2f       	mov	r20, r25
     ffa:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 7));
     ffe:	fe 01       	movw	r30, r28
    1000:	ed 59       	subi	r30, 0x9D	; 157
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	80 81       	ld	r24, Z
    1006:	98 2f       	mov	r25, r24
    1008:	99 1f       	adc	r25, r25
    100a:	99 27       	eor	r25, r25
    100c:	99 1f       	adc	r25, r25
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	66 e0       	ldi	r22, 0x06	; 6
    1012:	49 2f       	mov	r20, r25
    1014:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    1018:	fe 01       	movw	r30, r28
    101a:	ed 5b       	subi	r30, 0xBD	; 189
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a0 e8       	ldi	r26, 0x80	; 128
    1024:	bf e3       	ldi	r27, 0x3F	; 63
    1026:	80 83       	st	Z, r24
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	a2 83       	std	Z+2, r26	; 0x02
    102c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102e:	8e 01       	movw	r16, r28
    1030:	01 5c       	subi	r16, 0xC1	; 193
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	fe 01       	movw	r30, r28
    1036:	ed 5b       	subi	r30, 0xBD	; 189
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	f8 01       	movw	r30, r16
    1054:	80 83       	st	Z, r24
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	a2 83       	std	Z+2, r26	; 0x02
    105a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    105c:	fe 01       	movw	r30, r28
    105e:	ff 96       	adiw	r30, 0x3f	; 63
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <CLCD_voidSendCommand+0x3e4>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9e af       	std	Y+62, r25	; 0x3e
    107e:	8d af       	std	Y+61, r24	; 0x3d
    1080:	46 c0       	rjmp	.+140    	; 0x110e <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1082:	fe 01       	movw	r30, r28
    1084:	ff 96       	adiw	r30, 0x3f	; 63
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	64 f5       	brge	.+88     	; 0x10f6 <CLCD_voidSendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109e:	fe 01       	movw	r30, r28
    10a0:	ed 5b       	subi	r30, 0xBD	; 189
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e af       	std	Y+62, r25	; 0x3e
    10ca:	8d af       	std	Y+61, r24	; 0x3d
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <CLCD_voidSendCommand+0x44e>
    10ce:	88 ec       	ldi	r24, 0xC8	; 200
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c af       	std	Y+60, r25	; 0x3c
    10d4:	8b af       	std	Y+59, r24	; 0x3b
    10d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    10d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <CLCD_voidSendCommand+0x43c>
    10de:	9c af       	std	Y+60, r25	; 0x3c
    10e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9e af       	std	Y+62, r25	; 0x3e
    10ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    10ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	69 f7       	brne	.-38     	; 0x10ce <CLCD_voidSendCommand+0x430>
    10f4:	16 c0       	rjmp	.+44     	; 0x1122 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	fe 01       	movw	r30, r28
    10f8:	ff 96       	adiw	r30, 0x3f	; 63
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9e af       	std	Y+62, r25	; 0x3e
    110c:	8d af       	std	Y+61, r24	; 0x3d
    110e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1110:	9e ad       	ldd	r25, Y+62	; 0x3e
    1112:	9a af       	std	Y+58, r25	; 0x3a
    1114:	89 af       	std	Y+57, r24	; 0x39
    1116:	89 ad       	ldd	r24, Y+57	; 0x39
    1118:	9a ad       	ldd	r25, Y+58	; 0x3a
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <CLCD_voidSendCommand+0x47c>
    111e:	9a af       	std	Y+58, r25	; 0x3a
    1120:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	62 e0       	ldi	r22, 0x02	; 2
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e8       	ldi	r26, 0x80	; 128
    1132:	bf e3       	ldi	r27, 0x3F	; 63
    1134:	8d ab       	std	Y+53, r24	; 0x35
    1136:	9e ab       	std	Y+54, r25	; 0x36
    1138:	af ab       	std	Y+55, r26	; 0x37
    113a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113c:	6d a9       	ldd	r22, Y+53	; 0x35
    113e:	7e a9       	ldd	r23, Y+54	; 0x36
    1140:	8f a9       	ldd	r24, Y+55	; 0x37
    1142:	98 ad       	ldd	r25, Y+56	; 0x38
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a ef       	ldi	r20, 0xFA	; 250
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	89 ab       	std	Y+49, r24	; 0x31
    1156:	9a ab       	std	Y+50, r25	; 0x32
    1158:	ab ab       	std	Y+51, r26	; 0x33
    115a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    115c:	69 a9       	ldd	r22, Y+49	; 0x31
    115e:	7a a9       	ldd	r23, Y+50	; 0x32
    1160:	8b a9       	ldd	r24, Y+51	; 0x33
    1162:	9c a9       	ldd	r25, Y+52	; 0x34
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1170:	88 23       	and	r24, r24
    1172:	2c f4       	brge	.+10     	; 0x117e <CLCD_voidSendCommand+0x4e0>
		__ticks = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	98 ab       	std	Y+48, r25	; 0x30
    117a:	8f a7       	std	Y+47, r24	; 0x2f
    117c:	3f c0       	rjmp	.+126    	; 0x11fc <CLCD_voidSendCommand+0x55e>
	else if (__tmp > 65535)
    117e:	69 a9       	ldd	r22, Y+49	; 0x31
    1180:	7a a9       	ldd	r23, Y+50	; 0x32
    1182:	8b a9       	ldd	r24, Y+51	; 0x33
    1184:	9c a9       	ldd	r25, Y+52	; 0x34
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1192:	18 16       	cp	r1, r24
    1194:	4c f5       	brge	.+82     	; 0x11e8 <CLCD_voidSendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1196:	6d a9       	ldd	r22, Y+53	; 0x35
    1198:	7e a9       	ldd	r23, Y+54	; 0x36
    119a:	8f a9       	ldd	r24, Y+55	; 0x37
    119c:	98 ad       	ldd	r25, Y+56	; 0x38
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	98 ab       	std	Y+48, r25	; 0x30
    11bc:	8f a7       	std	Y+47, r24	; 0x2f
    11be:	0f c0       	rjmp	.+30     	; 0x11de <CLCD_voidSendCommand+0x540>
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9e a7       	std	Y+46, r25	; 0x2e
    11c6:	8d a7       	std	Y+45, r24	; 0x2d
    11c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    11ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <CLCD_voidSendCommand+0x52e>
    11d0:	9e a7       	std	Y+46, r25	; 0x2e
    11d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d6:	98 a9       	ldd	r25, Y+48	; 0x30
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	98 ab       	std	Y+48, r25	; 0x30
    11dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e0:	98 a9       	ldd	r25, Y+48	; 0x30
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <CLCD_voidSendCommand+0x522>
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <CLCD_voidSendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ea:	7a a9       	ldd	r23, Y+50	; 0x32
    11ec:	8b a9       	ldd	r24, Y+51	; 0x33
    11ee:	9c a9       	ldd	r25, Y+52	; 0x34
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	98 ab       	std	Y+48, r25	; 0x30
    11fa:	8f a7       	std	Y+47, r24	; 0x2f
    11fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1200:	9c a7       	std	Y+44, r25	; 0x2c
    1202:	8b a7       	std	Y+43, r24	; 0x2b
    1204:	8b a5       	ldd	r24, Y+43	; 0x2b
    1206:	9c a5       	ldd	r25, Y+44	; 0x2c
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <CLCD_voidSendCommand+0x56a>
    120c:	9c a7       	std	Y+44, r25	; 0x2c
    120e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	62 e0       	ldi	r22, 0x02	; 2
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e8       	ldi	r26, 0x80	; 128
    1220:	bf e3       	ldi	r27, 0x3F	; 63
    1222:	8f a3       	std	Y+39, r24	; 0x27
    1224:	98 a7       	std	Y+40, r25	; 0x28
    1226:	a9 a7       	std	Y+41, r26	; 0x29
    1228:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122a:	6f a1       	ldd	r22, Y+39	; 0x27
    122c:	78 a5       	ldd	r23, Y+40	; 0x28
    122e:	89 a5       	ldd	r24, Y+41	; 0x29
    1230:	9a a5       	ldd	r25, Y+42	; 0x2a
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a ef       	ldi	r20, 0xFA	; 250
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8b a3       	std	Y+35, r24	; 0x23
    1244:	9c a3       	std	Y+36, r25	; 0x24
    1246:	ad a3       	std	Y+37, r26	; 0x25
    1248:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    124a:	6b a1       	ldd	r22, Y+35	; 0x23
    124c:	7c a1       	ldd	r23, Y+36	; 0x24
    124e:	8d a1       	ldd	r24, Y+37	; 0x25
    1250:	9e a1       	ldd	r25, Y+38	; 0x26
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <CLCD_voidSendCommand+0x5ce>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9a a3       	std	Y+34, r25	; 0x22
    1268:	89 a3       	std	Y+33, r24	; 0x21
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <CLCD_voidSendCommand+0x64c>
	else if (__tmp > 65535)
    126c:	6b a1       	ldd	r22, Y+35	; 0x23
    126e:	7c a1       	ldd	r23, Y+36	; 0x24
    1270:	8d a1       	ldd	r24, Y+37	; 0x25
    1272:	9e a1       	ldd	r25, Y+38	; 0x26
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1280:	18 16       	cp	r1, r24
    1282:	4c f5       	brge	.+82     	; 0x12d6 <CLCD_voidSendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6f a1       	ldd	r22, Y+39	; 0x27
    1286:	78 a5       	ldd	r23, Y+40	; 0x28
    1288:	89 a5       	ldd	r24, Y+41	; 0x29
    128a:	9a a5       	ldd	r25, Y+42	; 0x2a
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9a a3       	std	Y+34, r25	; 0x22
    12aa:	89 a3       	std	Y+33, r24	; 0x21
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <CLCD_voidSendCommand+0x62e>
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	98 a3       	std	Y+32, r25	; 0x20
    12b4:	8f 8f       	std	Y+31, r24	; 0x1f
    12b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12b8:	98 a1       	ldd	r25, Y+32	; 0x20
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <CLCD_voidSendCommand+0x61c>
    12be:	98 a3       	std	Y+32, r25	; 0x20
    12c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	89 a1       	ldd	r24, Y+33	; 0x21
    12c4:	9a a1       	ldd	r25, Y+34	; 0x22
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9a a3       	std	Y+34, r25	; 0x22
    12ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12cc:	89 a1       	ldd	r24, Y+33	; 0x21
    12ce:	9a a1       	ldd	r25, Y+34	; 0x22
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	69 f7       	brne	.-38     	; 0x12ae <CLCD_voidSendCommand+0x610>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <CLCD_voidSendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	6b a1       	ldd	r22, Y+35	; 0x23
    12d8:	7c a1       	ldd	r23, Y+36	; 0x24
    12da:	8d a1       	ldd	r24, Y+37	; 0x25
    12dc:	9e a1       	ldd	r25, Y+38	; 0x26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9a a3       	std	Y+34, r25	; 0x22
    12e8:	89 a3       	std	Y+33, r24	; 0x21
    12ea:	89 a1       	ldd	r24, Y+33	; 0x21
    12ec:	9a a1       	ldd	r25, Y+34	; 0x22
    12ee:	9e 8f       	std	Y+30, r25	; 0x1e
    12f0:	8d 8f       	std	Y+29, r24	; 0x1d
    12f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <CLCD_voidSendCommand+0x658>
    12fa:	9e 8f       	std	Y+30, r25	; 0x1e
    12fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 0));
    12fe:	fe 01       	movw	r30, r28
    1300:	ed 59       	subi	r30, 0x9D	; 157
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	98 2f       	mov	r25, r24
    1308:	91 70       	andi	r25, 0x01	; 1
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	63 e0       	ldi	r22, 0x03	; 3
    130e:	49 2f       	mov	r20, r25
    1310:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 1));
    1314:	fe 01       	movw	r30, r28
    1316:	ed 59       	subi	r30, 0x9D	; 157
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	86 95       	lsr	r24
    131e:	98 2f       	mov	r25, r24
    1320:	91 70       	andi	r25, 0x01	; 1
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	64 e0       	ldi	r22, 0x04	; 4
    1326:	49 2f       	mov	r20, r25
    1328:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 2));
    132c:	fe 01       	movw	r30, r28
    132e:	ed 59       	subi	r30, 0x9D	; 157
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 81       	ld	r24, Z
    1334:	86 95       	lsr	r24
    1336:	86 95       	lsr	r24
    1338:	98 2f       	mov	r25, r24
    133a:	91 70       	andi	r25, 0x01	; 1
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	65 e0       	ldi	r22, 0x05	; 5
    1340:	49 2f       	mov	r20, r25
    1342:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 3));
    1346:	fe 01       	movw	r30, r28
    1348:	ed 59       	subi	r30, 0x9D	; 157
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	86 95       	lsr	r24
    1350:	86 95       	lsr	r24
    1352:	86 95       	lsr	r24
    1354:	98 2f       	mov	r25, r24
    1356:	91 70       	andi	r25, 0x01	; 1
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	66 e0       	ldi	r22, 0x06	; 6
    135c:	49 2f       	mov	r20, r25
    135e:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a0 e8       	ldi	r26, 0x80	; 128
    1368:	bf e3       	ldi	r27, 0x3F	; 63
    136a:	89 8f       	std	Y+25, r24	; 0x19
    136c:	9a 8f       	std	Y+26, r25	; 0x1a
    136e:	ab 8f       	std	Y+27, r26	; 0x1b
    1370:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1372:	69 8d       	ldd	r22, Y+25	; 0x19
    1374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	4a ef       	ldi	r20, 0xFA	; 250
    1380:	54 e4       	ldi	r21, 0x44	; 68
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	8d 8b       	std	Y+21, r24	; 0x15
    138c:	9e 8b       	std	Y+22, r25	; 0x16
    138e:	af 8b       	std	Y+23, r26	; 0x17
    1390:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1392:	6d 89       	ldd	r22, Y+21	; 0x15
    1394:	7e 89       	ldd	r23, Y+22	; 0x16
    1396:	8f 89       	ldd	r24, Y+23	; 0x17
    1398:	98 8d       	ldd	r25, Y+24	; 0x18
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e8       	ldi	r20, 0x80	; 128
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <CLCD_voidSendCommand+0x716>
		__ticks = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 8b       	std	Y+20, r25	; 0x14
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
    13b2:	3f c0       	rjmp	.+126    	; 0x1432 <CLCD_voidSendCommand+0x794>
	else if (__tmp > 65535)
    13b4:	6d 89       	ldd	r22, Y+21	; 0x15
    13b6:	7e 89       	ldd	r23, Y+22	; 0x16
    13b8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ba:	98 8d       	ldd	r25, Y+24	; 0x18
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	3f ef       	ldi	r19, 0xFF	; 255
    13c0:	4f e7       	ldi	r20, 0x7F	; 127
    13c2:	57 e4       	ldi	r21, 0x47	; 71
    13c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c8:	18 16       	cp	r1, r24
    13ca:	4c f5       	brge	.+82     	; 0x141e <CLCD_voidSendCommand+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13cc:	69 8d       	ldd	r22, Y+25	; 0x19
    13ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e2       	ldi	r20, 0x20	; 32
    13da:	51 e4       	ldi	r21, 0x41	; 65
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9c 8b       	std	Y+20, r25	; 0x14
    13f2:	8b 8b       	std	Y+19, r24	; 0x13
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <CLCD_voidSendCommand+0x776>
    13f6:	88 ec       	ldi	r24, 0xC8	; 200
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9a 8b       	std	Y+18, r25	; 0x12
    13fc:	89 8b       	std	Y+17, r24	; 0x11
    13fe:	89 89       	ldd	r24, Y+17	; 0x11
    1400:	9a 89       	ldd	r25, Y+18	; 0x12
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <CLCD_voidSendCommand+0x764>
    1406:	9a 8b       	std	Y+18, r25	; 0x12
    1408:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140a:	8b 89       	ldd	r24, Y+19	; 0x13
    140c:	9c 89       	ldd	r25, Y+20	; 0x14
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	9c 8b       	std	Y+20, r25	; 0x14
    1412:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	8b 89       	ldd	r24, Y+19	; 0x13
    1416:	9c 89       	ldd	r25, Y+20	; 0x14
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	69 f7       	brne	.-38     	; 0x13f6 <CLCD_voidSendCommand+0x758>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <CLCD_voidSendCommand+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141e:	6d 89       	ldd	r22, Y+21	; 0x15
    1420:	7e 89       	ldd	r23, Y+22	; 0x16
    1422:	8f 89       	ldd	r24, Y+23	; 0x17
    1424:	98 8d       	ldd	r25, Y+24	; 0x18
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	98 8b       	std	Y+16, r25	; 0x10
    1438:	8f 87       	std	Y+15, r24	; 0x0f
    143a:	8f 85       	ldd	r24, Y+15	; 0x0f
    143c:	98 89       	ldd	r25, Y+16	; 0x10
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <CLCD_voidSendCommand+0x7a0>
    1442:	98 8b       	std	Y+16, r25	; 0x10
    1444:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e8       	ldi	r26, 0x80	; 128
    1456:	bf e3       	ldi	r27, 0x3F	; 63
    1458:	8b 87       	std	Y+11, r24	; 0x0b
    145a:	9c 87       	std	Y+12, r25	; 0x0c
    145c:	ad 87       	std	Y+13, r26	; 0x0d
    145e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1460:	6b 85       	ldd	r22, Y+11	; 0x0b
    1462:	7c 85       	ldd	r23, Y+12	; 0x0c
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	9e 85       	ldd	r25, Y+14	; 0x0e
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4a ef       	ldi	r20, 0xFA	; 250
    146e:	54 e4       	ldi	r21, 0x44	; 68
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8f 83       	std	Y+7, r24	; 0x07
    147a:	98 87       	std	Y+8, r25	; 0x08
    147c:	a9 87       	std	Y+9, r26	; 0x09
    147e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	2c f4       	brge	.+10     	; 0x14a2 <CLCD_voidSendCommand+0x804>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	3f c0       	rjmp	.+126    	; 0x1520 <CLCD_voidSendCommand+0x882>
	else if (__tmp > 65535)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	4c f5       	brge	.+82     	; 0x150c <CLCD_voidSendCommand+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e2       	ldi	r20, 0x20	; 32
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <CLCD_voidSendCommand+0x864>
    14e4:	88 ec       	ldi	r24, 0xC8	; 200
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <CLCD_voidSendCommand+0x852>
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f7       	brne	.-38     	; 0x14e4 <CLCD_voidSendCommand+0x846>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <CLCD_voidSendCommand+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <CLCD_voidSendCommand+0x88e>
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=1 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1534:	cd 59       	subi	r28, 0x9D	; 157
    1536:	df 4f       	sbci	r29, 0xFF	; 255
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	c3 56       	subi	r28, 0x63	; 99
    155a:	d0 40       	sbci	r29, 0x00	; 0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	fe 01       	movw	r30, r28
    1568:	ed 59       	subi	r30, 0x9D	; 157
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_HIGH); /* Data Mode RS=1 */
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    1582:	fe 01       	movw	r30, r28
    1584:	e1 5a       	subi	r30, 0xA1	; 161
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e8       	ldi	r26, 0x80	; 128
    158e:	bf e3       	ldi	r27, 0x3F	; 63
    1590:	80 83       	st	Z, r24
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	a2 83       	std	Z+2, r26	; 0x02
    1596:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	8e 01       	movw	r16, r28
    159a:	05 5a       	subi	r16, 0xA5	; 165
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	fe 01       	movw	r30, r28
    15a0:	e1 5a       	subi	r30, 0xA1	; 161
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a ef       	ldi	r20, 0xFA	; 250
    15b2:	54 e4       	ldi	r21, 0x44	; 68
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	f8 01       	movw	r30, r16
    15be:	80 83       	st	Z, r24
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	a2 83       	std	Z+2, r26	; 0x02
    15c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c6:	fe 01       	movw	r30, r28
    15c8:	e5 5a       	subi	r30, 0xA5	; 165
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	44 f4       	brge	.+16     	; 0x15f4 <CLCD_voidSendData+0xa8>
		__ticks = 1;
    15e4:	fe 01       	movw	r30, r28
    15e6:	e7 5a       	subi	r30, 0xA7	; 167
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	64 c0       	rjmp	.+200    	; 0x16bc <CLCD_voidSendData+0x170>
	else if (__tmp > 65535)
    15f4:	fe 01       	movw	r30, r28
    15f6:	e5 5a       	subi	r30, 0xA5	; 165
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	0c f0       	brlt	.+2      	; 0x1614 <CLCD_voidSendData+0xc8>
    1612:	43 c0       	rjmp	.+134    	; 0x169a <CLCD_voidSendData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	fe 01       	movw	r30, r28
    1616:	e1 5a       	subi	r30, 0xA1	; 161
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	8e 01       	movw	r16, r28
    1634:	07 5a       	subi	r16, 0xA7	; 167
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	f8 01       	movw	r30, r16
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	80 83       	st	Z, r24
    164a:	1f c0       	rjmp	.+62     	; 0x168a <CLCD_voidSendData+0x13e>
    164c:	fe 01       	movw	r30, r28
    164e:	e9 5a       	subi	r30, 0xA9	; 169
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	88 ec       	ldi	r24, 0xC8	; 200
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	fe 01       	movw	r30, r28
    165c:	e9 5a       	subi	r30, 0xA9	; 169
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <CLCD_voidSendData+0x118>
    1668:	fe 01       	movw	r30, r28
    166a:	e9 5a       	subi	r30, 0xA9	; 169
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	de 01       	movw	r26, r28
    1674:	a7 5a       	subi	r26, 0xA7	; 167
    1676:	bf 4f       	sbci	r27, 0xFF	; 255
    1678:	fe 01       	movw	r30, r28
    167a:	e7 5a       	subi	r30, 0xA7	; 167
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	11 96       	adiw	r26, 0x01	; 1
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	fe 01       	movw	r30, r28
    168c:	e7 5a       	subi	r30, 0xA7	; 167
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	d1 f6       	brne	.-76     	; 0x164c <CLCD_voidSendData+0x100>
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <CLCD_voidSendData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169a:	8e 01       	movw	r16, r28
    169c:	07 5a       	subi	r16, 0xA7	; 167
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	e5 5a       	subi	r30, 0xA5	; 165
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	60 81       	ld	r22, Z
    16a8:	71 81       	ldd	r23, Z+1	; 0x01
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	93 81       	ldd	r25, Z+3	; 0x03
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    16bc:	de 01       	movw	r26, r28
    16be:	ab 5a       	subi	r26, 0xAB	; 171
    16c0:	bf 4f       	sbci	r27, 0xFF	; 255
    16c2:	fe 01       	movw	r30, r28
    16c4:	e7 5a       	subi	r30, 0xA7	; 167
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	8d 93       	st	X+, r24
    16ce:	9c 93       	st	X, r25
    16d0:	fe 01       	movw	r30, r28
    16d2:	eb 5a       	subi	r30, 0xAB	; 171
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <CLCD_voidSendData+0x18e>
    16de:	fe 01       	movw	r30, r28
    16e0:	eb 5a       	subi	r30, 0xAB	; 171
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	62 e0       	ldi	r22, 0x02	; 2
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    16f2:	fe 01       	movw	r30, r28
    16f4:	ef 5a       	subi	r30, 0xAF	; 175
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e8       	ldi	r26, 0x80	; 128
    16fe:	bf e3       	ldi	r27, 0x3F	; 63
    1700:	80 83       	st	Z, r24
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	a2 83       	std	Z+2, r26	; 0x02
    1706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	8e 01       	movw	r16, r28
    170a:	03 5b       	subi	r16, 0xB3	; 179
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	ef 5a       	subi	r30, 0xAF	; 175
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a ef       	ldi	r20, 0xFA	; 250
    1722:	54 e4       	ldi	r21, 0x44	; 68
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	a2 83       	std	Z+2, r26	; 0x02
    1734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1736:	fe 01       	movw	r30, r28
    1738:	e3 5b       	subi	r30, 0xB3	; 179
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	44 f4       	brge	.+16     	; 0x1764 <CLCD_voidSendData+0x218>
		__ticks = 1;
    1754:	fe 01       	movw	r30, r28
    1756:	e5 5b       	subi	r30, 0xB5	; 181
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	64 c0       	rjmp	.+200    	; 0x182c <CLCD_voidSendData+0x2e0>
	else if (__tmp > 65535)
    1764:	fe 01       	movw	r30, r28
    1766:	e3 5b       	subi	r30, 0xB3	; 179
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	0c f0       	brlt	.+2      	; 0x1784 <CLCD_voidSendData+0x238>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <CLCD_voidSendData+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	fe 01       	movw	r30, r28
    1786:	ef 5a       	subi	r30, 0xAF	; 175
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8e 01       	movw	r16, r28
    17a4:	05 5b       	subi	r16, 0xB5	; 181
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <CLCD_voidSendData+0x2ae>
    17bc:	fe 01       	movw	r30, r28
    17be:	e7 5b       	subi	r30, 0xB7	; 183
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	fe 01       	movw	r30, r28
    17cc:	e7 5b       	subi	r30, 0xB7	; 183
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <CLCD_voidSendData+0x288>
    17d8:	fe 01       	movw	r30, r28
    17da:	e7 5b       	subi	r30, 0xB7	; 183
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	de 01       	movw	r26, r28
    17e4:	a5 5b       	subi	r26, 0xB5	; 181
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	fe 01       	movw	r30, r28
    17ea:	e5 5b       	subi	r30, 0xB5	; 181
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	9c 93       	st	X, r25
    17f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	fe 01       	movw	r30, r28
    17fc:	e5 5b       	subi	r30, 0xB5	; 181
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	d1 f6       	brne	.-76     	; 0x17bc <CLCD_voidSendData+0x270>
    1808:	27 c0       	rjmp	.+78     	; 0x1858 <CLCD_voidSendData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	8e 01       	movw	r16, r28
    180c:	05 5b       	subi	r16, 0xB5	; 181
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e3 5b       	subi	r30, 0xB3	; 179
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	de 01       	movw	r26, r28
    182e:	a9 5b       	subi	r26, 0xB9	; 185
    1830:	bf 4f       	sbci	r27, 0xFF	; 255
    1832:	fe 01       	movw	r30, r28
    1834:	e5 5b       	subi	r30, 0xB5	; 181
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	8d 93       	st	X+, r24
    183e:	9c 93       	st	X, r25
    1840:	fe 01       	movw	r30, r28
    1842:	e9 5b       	subi	r30, 0xB9	; 185
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <CLCD_voidSendData+0x2fe>
    184e:	fe 01       	movw	r30, r28
    1850:	e9 5b       	subi	r30, 0xB9	; 185
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 4));
    1858:	fe 01       	movw	r30, r28
    185a:	ed 59       	subi	r30, 0x9D	; 157
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	82 95       	swap	r24
    1862:	8f 70       	andi	r24, 0x0F	; 15
    1864:	98 2f       	mov	r25, r24
    1866:	91 70       	andi	r25, 0x01	; 1
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	63 e0       	ldi	r22, 0x03	; 3
    186c:	49 2f       	mov	r20, r25
    186e:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 5));
    1872:	fe 01       	movw	r30, r28
    1874:	ed 59       	subi	r30, 0x9D	; 157
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	82 95       	swap	r24
    187c:	86 95       	lsr	r24
    187e:	87 70       	andi	r24, 0x07	; 7
    1880:	98 2f       	mov	r25, r24
    1882:	91 70       	andi	r25, 0x01	; 1
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	64 e0       	ldi	r22, 0x04	; 4
    1888:	49 2f       	mov	r20, r25
    188a:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 6));
    188e:	fe 01       	movw	r30, r28
    1890:	ed 59       	subi	r30, 0x9D	; 157
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	82 95       	swap	r24
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	83 70       	andi	r24, 0x03	; 3
    189e:	98 2f       	mov	r25, r24
    18a0:	91 70       	andi	r25, 0x01	; 1
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	65 e0       	ldi	r22, 0x05	; 5
    18a6:	49 2f       	mov	r20, r25
    18a8:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 7));
    18ac:	fe 01       	movw	r30, r28
    18ae:	ed 59       	subi	r30, 0x9D	; 157
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	98 2f       	mov	r25, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	99 27       	eor	r25, r25
    18ba:	99 1f       	adc	r25, r25
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	66 e0       	ldi	r22, 0x06	; 6
    18c0:	49 2f       	mov	r20, r25
    18c2:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    18c6:	fe 01       	movw	r30, r28
    18c8:	ed 5b       	subi	r30, 0xBD	; 189
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e8       	ldi	r26, 0x80	; 128
    18d2:	bf e3       	ldi	r27, 0x3F	; 63
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	a2 83       	std	Z+2, r26	; 0x02
    18da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	8e 01       	movw	r16, r28
    18de:	01 5c       	subi	r16, 0xC1	; 193
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 5b       	subi	r30, 0xBD	; 189
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	f8 01       	movw	r30, r16
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190a:	fe 01       	movw	r30, r28
    190c:	ff 96       	adiw	r30, 0x3f	; 63
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <CLCD_voidSendData+0x3e4>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9e af       	std	Y+62, r25	; 0x3e
    192c:	8d af       	std	Y+61, r24	; 0x3d
    192e:	46 c0       	rjmp	.+140    	; 0x19bc <CLCD_voidSendData+0x470>
	else if (__tmp > 65535)
    1930:	fe 01       	movw	r30, r28
    1932:	ff 96       	adiw	r30, 0x3f	; 63
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	64 f5       	brge	.+88     	; 0x19a4 <CLCD_voidSendData+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	fe 01       	movw	r30, r28
    194e:	ed 5b       	subi	r30, 0xBD	; 189
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9e af       	std	Y+62, r25	; 0x3e
    1978:	8d af       	std	Y+61, r24	; 0x3d
    197a:	0f c0       	rjmp	.+30     	; 0x199a <CLCD_voidSendData+0x44e>
    197c:	88 ec       	ldi	r24, 0xC8	; 200
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c af       	std	Y+60, r25	; 0x3c
    1982:	8b af       	std	Y+59, r24	; 0x3b
    1984:	8b ad       	ldd	r24, Y+59	; 0x3b
    1986:	9c ad       	ldd	r25, Y+60	; 0x3c
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <CLCD_voidSendData+0x43c>
    198c:	9c af       	std	Y+60, r25	; 0x3c
    198e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8d ad       	ldd	r24, Y+61	; 0x3d
    1992:	9e ad       	ldd	r25, Y+62	; 0x3e
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9e af       	std	Y+62, r25	; 0x3e
    1998:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8d ad       	ldd	r24, Y+61	; 0x3d
    199c:	9e ad       	ldd	r25, Y+62	; 0x3e
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <CLCD_voidSendData+0x430>
    19a2:	16 c0       	rjmp	.+44     	; 0x19d0 <CLCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	fe 01       	movw	r30, r28
    19a6:	ff 96       	adiw	r30, 0x3f	; 63
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9e af       	std	Y+62, r25	; 0x3e
    19ba:	8d af       	std	Y+61, r24	; 0x3d
    19bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    19be:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c0:	9a af       	std	Y+58, r25	; 0x3a
    19c2:	89 af       	std	Y+57, r24	; 0x39
    19c4:	89 ad       	ldd	r24, Y+57	; 0x39
    19c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <CLCD_voidSendData+0x47c>
    19cc:	9a af       	std	Y+58, r25	; 0x3a
    19ce:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	62 e0       	ldi	r22, 0x02	; 2
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 e8       	ldi	r26, 0x80	; 128
    19e0:	bf e3       	ldi	r27, 0x3F	; 63
    19e2:	8d ab       	std	Y+53, r24	; 0x35
    19e4:	9e ab       	std	Y+54, r25	; 0x36
    19e6:	af ab       	std	Y+55, r26	; 0x37
    19e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	6d a9       	ldd	r22, Y+53	; 0x35
    19ec:	7e a9       	ldd	r23, Y+54	; 0x36
    19ee:	8f a9       	ldd	r24, Y+55	; 0x37
    19f0:	98 ad       	ldd	r25, Y+56	; 0x38
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a ef       	ldi	r20, 0xFA	; 250
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	89 ab       	std	Y+49, r24	; 0x31
    1a04:	9a ab       	std	Y+50, r25	; 0x32
    1a06:	ab ab       	std	Y+51, r26	; 0x33
    1a08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a10:	9c a9       	ldd	r25, Y+52	; 0x34
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <CLCD_voidSendData+0x4e0>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	98 ab       	std	Y+48, r25	; 0x30
    1a28:	8f a7       	std	Y+47, r24	; 0x2f
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <CLCD_voidSendData+0x55e>
	else if (__tmp > 65535)
    1a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a30:	8b a9       	ldd	r24, Y+51	; 0x33
    1a32:	9c a9       	ldd	r25, Y+52	; 0x34
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	57 e4       	ldi	r21, 0x47	; 71
    1a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <CLCD_voidSendData+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	6d a9       	ldd	r22, Y+53	; 0x35
    1a46:	7e a9       	ldd	r23, Y+54	; 0x36
    1a48:	8f a9       	ldd	r24, Y+55	; 0x37
    1a4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	98 ab       	std	Y+48, r25	; 0x30
    1a6a:	8f a7       	std	Y+47, r24	; 0x2f
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <CLCD_voidSendData+0x540>
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9e a7       	std	Y+46, r25	; 0x2e
    1a74:	8d a7       	std	Y+45, r24	; 0x2d
    1a76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <CLCD_voidSendData+0x52e>
    1a7e:	9e a7       	std	Y+46, r25	; 0x2e
    1a80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a84:	98 a9       	ldd	r25, Y+48	; 0x30
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	98 ab       	std	Y+48, r25	; 0x30
    1a8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <CLCD_voidSendData+0x522>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <CLCD_voidSendData+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	69 a9       	ldd	r22, Y+49	; 0x31
    1a98:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	98 ab       	std	Y+48, r25	; 0x30
    1aa8:	8f a7       	std	Y+47, r24	; 0x2f
    1aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aac:	98 a9       	ldd	r25, Y+48	; 0x30
    1aae:	9c a7       	std	Y+44, r25	; 0x2c
    1ab0:	8b a7       	std	Y+43, r24	; 0x2b
    1ab2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <CLCD_voidSendData+0x56a>
    1aba:	9c a7       	std	Y+44, r25	; 0x2c
    1abc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 e8       	ldi	r26, 0x80	; 128
    1ace:	bf e3       	ldi	r27, 0x3F	; 63
    1ad0:	8f a3       	std	Y+39, r24	; 0x27
    1ad2:	98 a7       	std	Y+40, r25	; 0x28
    1ad4:	a9 a7       	std	Y+41, r26	; 0x29
    1ad6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    1ada:	78 a5       	ldd	r23, Y+40	; 0x28
    1adc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4a ef       	ldi	r20, 0xFA	; 250
    1ae6:	54 e4       	ldi	r21, 0x44	; 68
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8b a3       	std	Y+35, r24	; 0x23
    1af2:	9c a3       	std	Y+36, r25	; 0x24
    1af4:	ad a3       	std	Y+37, r26	; 0x25
    1af6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1af8:	6b a1       	ldd	r22, Y+35	; 0x23
    1afa:	7c a1       	ldd	r23, Y+36	; 0x24
    1afc:	8d a1       	ldd	r24, Y+37	; 0x25
    1afe:	9e a1       	ldd	r25, Y+38	; 0x26
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <CLCD_voidSendData+0x5ce>
		__ticks = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
    1b18:	3f c0       	rjmp	.+126    	; 0x1b98 <CLCD_voidSendData+0x64c>
	else if (__tmp > 65535)
    1b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b20:	9e a1       	ldd	r25, Y+38	; 0x26
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	4c f5       	brge	.+82     	; 0x1b84 <CLCD_voidSendData+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b32:	6f a1       	ldd	r22, Y+39	; 0x27
    1b34:	78 a5       	ldd	r23, Y+40	; 0x28
    1b36:	89 a5       	ldd	r24, Y+41	; 0x29
    1b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9a a3       	std	Y+34, r25	; 0x22
    1b58:	89 a3       	std	Y+33, r24	; 0x21
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <CLCD_voidSendData+0x62e>
    1b5c:	88 ec       	ldi	r24, 0xC8	; 200
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	98 a3       	std	Y+32, r25	; 0x20
    1b62:	8f 8f       	std	Y+31, r24	; 0x1f
    1b64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b66:	98 a1       	ldd	r25, Y+32	; 0x20
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <CLCD_voidSendData+0x61c>
    1b6c:	98 a3       	std	Y+32, r25	; 0x20
    1b6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b70:	89 a1       	ldd	r24, Y+33	; 0x21
    1b72:	9a a1       	ldd	r25, Y+34	; 0x22
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	9a a3       	std	Y+34, r25	; 0x22
    1b78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f7       	brne	.-38     	; 0x1b5c <CLCD_voidSendData+0x610>
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <CLCD_voidSendData+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b84:	6b a1       	ldd	r22, Y+35	; 0x23
    1b86:	7c a1       	ldd	r23, Y+36	; 0x24
    1b88:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9a a3       	std	Y+34, r25	; 0x22
    1b96:	89 a3       	std	Y+33, r24	; 0x21
    1b98:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <CLCD_voidSendData+0x658>
    1ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    1baa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 0));
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 59       	subi	r30, 0x9D	; 157
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	91 70       	andi	r25, 0x01	; 1
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	63 e0       	ldi	r22, 0x03	; 3
    1bbc:	49 2f       	mov	r20, r25
    1bbe:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 1));
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ed 59       	subi	r30, 0x9D	; 157
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	86 95       	lsr	r24
    1bcc:	98 2f       	mov	r25, r24
    1bce:	91 70       	andi	r25, 0x01	; 1
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	64 e0       	ldi	r22, 0x04	; 4
    1bd4:	49 2f       	mov	r20, r25
    1bd6:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 2));
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ed 59       	subi	r30, 0x9D	; 157
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	86 95       	lsr	r24
    1be4:	86 95       	lsr	r24
    1be6:	98 2f       	mov	r25, r24
    1be8:	91 70       	andi	r25, 0x01	; 1
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	65 e0       	ldi	r22, 0x05	; 5
    1bee:	49 2f       	mov	r20, r25
    1bf0:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 3));
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ed 59       	subi	r30, 0x9D	; 157
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	86 95       	lsr	r24
    1bfe:	86 95       	lsr	r24
    1c00:	86 95       	lsr	r24
    1c02:	98 2f       	mov	r25, r24
    1c04:	91 70       	andi	r25, 0x01	; 1
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	66 e0       	ldi	r22, 0x06	; 6
    1c0a:	49 2f       	mov	r20, r25
    1c0c:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	89 8f       	std	Y+25, r24	; 0x19
    1c1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	69 8d       	ldd	r22, Y+25	; 0x19
    1c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8d 8b       	std	Y+21, r24	; 0x15
    1c3a:	9e 8b       	std	Y+22, r25	; 0x16
    1c3c:	af 8b       	std	Y+23, r26	; 0x17
    1c3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c40:	6d 89       	ldd	r22, Y+21	; 0x15
    1c42:	7e 89       	ldd	r23, Y+22	; 0x16
    1c44:	8f 89       	ldd	r24, Y+23	; 0x17
    1c46:	98 8d       	ldd	r25, Y+24	; 0x18
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <CLCD_voidSendData+0x716>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <CLCD_voidSendData+0x794>
	else if (__tmp > 65535)
    1c62:	6d 89       	ldd	r22, Y+21	; 0x15
    1c64:	7e 89       	ldd	r23, Y+22	; 0x16
    1c66:	8f 89       	ldd	r24, Y+23	; 0x17
    1c68:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <CLCD_voidSendData+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <CLCD_voidSendData+0x776>
    1ca4:	88 ec       	ldi	r24, 0xC8	; 200
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9a 8b       	std	Y+18, r25	; 0x12
    1caa:	89 8b       	std	Y+17, r24	; 0x11
    1cac:	89 89       	ldd	r24, Y+17	; 0x11
    1cae:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <CLCD_voidSendData+0x764>
    1cb4:	9a 8b       	std	Y+18, r25	; 0x12
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <CLCD_voidSendData+0x758>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <CLCD_voidSendData+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cce:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce4:	98 8b       	std	Y+16, r25	; 0x10
    1ce6:	8f 87       	std	Y+15, r24	; 0x0f
    1ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cea:	98 89       	ldd	r25, Y+16	; 0x10
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <CLCD_voidSendData+0x7a0>
    1cf0:	98 8b       	std	Y+16, r25	; 0x10
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	62 e0       	ldi	r22, 0x02	; 2
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e8       	ldi	r26, 0x80	; 128
    1d04:	bf e3       	ldi	r27, 0x3F	; 63
    1d06:	8b 87       	std	Y+11, r24	; 0x0b
    1d08:	9c 87       	std	Y+12, r25	; 0x0c
    1d0a:	ad 87       	std	Y+13, r26	; 0x0d
    1d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a ef       	ldi	r20, 0xFA	; 250
    1d1c:	54 e4       	ldi	r21, 0x44	; 68
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f 83       	std	Y+7, r24	; 0x07
    1d28:	98 87       	std	Y+8, r25	; 0x08
    1d2a:	a9 87       	std	Y+9, r26	; 0x09
    1d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <CLCD_voidSendData+0x804>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <CLCD_voidSendData+0x882>
	else if (__tmp > 65535)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <CLCD_voidSendData+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <CLCD_voidSendData+0x864>
    1d92:	88 ec       	ldi	r24, 0xC8	; 200
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <CLCD_voidSendData+0x852>
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <CLCD_voidSendData+0x846>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <CLCD_voidSendData+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <CLCD_voidSendData+0x88e>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_U8Data);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1de2:	cd 59       	subi	r28, 0x9D	; 157
    1de4:	df 4f       	sbci	r29, 0xFF	; 255
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	2e 97       	sbiw	r28, 0x0e	; 14
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E and RW pins as output pins */
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	62 e0       	ldi	r22, 0x02	; 2
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 ea       	ldi	r26, 0xA0	; 160
    1e32:	b1 e4       	ldi	r27, 0x41	; 65
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	9c 87       	std	Y+12, r25	; 0x0c
    1e38:	ad 87       	std	Y+13, r26	; 0x0d
    1e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8f 83       	std	Y+7, r24	; 0x07
    1e56:	98 87       	std	Y+8, r25	; 0x08
    1e58:	a9 87       	std	Y+9, r26	; 0x09
    1e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <CLCD_voidInit+0x84>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <CLCD_voidInit+0x102>
	else if (__tmp > 65535)
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <CLCD_voidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <CLCD_voidInit+0xe4>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <CLCD_voidInit+0xd2>
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <CLCD_voidInit+0xc6>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <CLCD_voidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <CLCD_voidInit+0x10e>
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if (CLCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D4_PIN,DIO_u8PIN_OUTPUT);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	63 e0       	ldi	r22, 0x03	; 3
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D5_PIN,DIO_u8PIN_OUTPUT);
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	64 e0       	ldi	r22, 0x04	; 4
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D6_PIN,DIO_u8PIN_OUTPUT);
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	65 e0       	ldi	r22, 0x05	; 5
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D7_PIN,DIO_u8PIN_OUTPUT);
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	66 e0       	ldi	r22, 0x06	; 6
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f38:	83 e3       	ldi	r24, 0x33	; 51
    1f3a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f3e:	82 e3       	ldi	r24, 0x32	; 50
    1f40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1f44:	88 e2       	ldi	r24, 0x28	; 40
    1f46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

	CLCD_voidSendCommand(LCD_CURSOR_OFF);    /* cursor off */
    1f4a:	8c e0       	ldi	r24, 0x0C	; 12
    1f4c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1f56:	2e 96       	adiw	r28, 0x0e	; 14
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <CLCD_voidSendString+0x6>
    1f6e:	0f 92       	push	r0
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	9b 83       	std	Y+3, r25	; 0x03
    1f76:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	fc 01       	movw	r30, r24
    1f88:	e2 0f       	add	r30, r18
    1f8a:	f3 1f       	adc	r31, r19
    1f8c:	80 81       	ld	r24, Z
    1f8e:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
		Local_u8Counter++;
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 23       	and	r24, r24
    1fac:	39 f7       	brne	.-50     	; 0x1f7c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <CLCD_voidGoToXY+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <CLCD_voidGoToXY+0x8>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8XPos) {
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	3c 83       	std	Y+4, r19	; 0x04
    1fd2:	2b 83       	std	Y+3, r18	; 0x03
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	91 05       	cpc	r25, r1
    1fdc:	d1 f0       	breq	.+52     	; 0x2012 <CLCD_voidGoToXY+0x58>
    1fde:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <CLCD_voidGoToXY+0x38>
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	61 f0       	breq	.+24     	; 0x2008 <CLCD_voidGoToXY+0x4e>
    1ff0:	1d c0       	rjmp	.+58     	; 0x202c <CLCD_voidGoToXY+0x72>
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	81 f0       	breq	.+32     	; 0x201c <CLCD_voidGoToXY+0x62>
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	91 05       	cpc	r25, r1
    2004:	79 f0       	breq	.+30     	; 0x2024 <CLCD_voidGoToXY+0x6a>
    2006:	12 c0       	rjmp	.+36     	; 0x202c <CLCD_voidGoToXY+0x72>
	case 0:
		CLCD_voidSendCommand(128 + Copy_u8YPos);
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	80 58       	subi	r24, 0x80	; 128
    200c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    2010:	0d c0       	rjmp	.+26     	; 0x202c <CLCD_voidGoToXY+0x72>
		break;
	case 1:
		CLCD_voidSendCommand(192 + Copy_u8YPos);
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	80 54       	subi	r24, 0x40	; 64
    2016:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    201a:	08 c0       	rjmp	.+16     	; 0x202c <CLCD_voidGoToXY+0x72>
		break;
	case 2:
		CLCD_voidSendCommand(256 + Copy_u8YPos);
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    2022:	04 c0       	rjmp	.+8      	; 0x202c <CLCD_voidGoToXY+0x72>
		break;
	case 3:
		CLCD_voidSendCommand(320 + Copy_u8YPos);
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	80 5c       	subi	r24, 0xC0	; 192
    2028:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	default:
		//
		break;

	}
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <CLCD_voidSendStringGoToXY>:

void CLCD_voidSendStringGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos,const char* Copy_pcString)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <CLCD_voidSendStringGoToXY+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <CLCD_voidSendStringGoToXY+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	6a 83       	std	Y+2, r22	; 0x02
    204a:	5c 83       	std	Y+4, r21	; 0x04
    204c:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	6a 81       	ldd	r22, Y+2	; 0x02
    2052:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
	CLCD_voidSendString(Copy_pcString);
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>


}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	27 97       	sbiw	r28, 0x07	; 7
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	6d 83       	std	Y+5, r22	; 0x05
    2086:	4e 83       	std	Y+6, r20	; 0x06
    2088:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    208a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;
	u8SateSpecialCharIndx = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	80 93 7c 00 	sts	0x007C, r24

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	80 5c       	subi	r24, 0xC0	; 192
    20aa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	0e c0       	rjmp	.+28     	; 0x20ce <CLCD_voidWriteSpecialCharacter+0x62>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	fc 01       	movw	r30, r24
    20be:	e2 0f       	add	r30, r18
    20c0:	f3 1f       	adc	r31, r19
    20c2:	80 81       	ld	r24, Z
    20c4:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
	u8SateSpecialCharIndx = 1;

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	88 30       	cpi	r24, 0x08	; 8
    20d2:	78 f3       	brcs	.-34     	; 0x20b2 <CLCD_voidWriteSpecialCharacter+0x46>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY(Copy_u8XPos , Copy_u8YPos);
    20d4:	8e 81       	ldd	r24, Y+6	; 0x06
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
	u8SateSpecialCharIndx = 0;
    20e2:	10 92 7c 00 	sts	0x007C, r1
}
    20e6:	27 96       	adiw	r28, 0x07	; 7
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	61 97       	sbiw	r28, 0x11	; 17
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	6e 87       	std	Y+14, r22	; 0x0e
    210e:	7f 87       	std	Y+15, r23	; 0x0f
    2110:	88 8b       	std	Y+16, r24	; 0x10
    2112:	99 8b       	std	Y+17, r25	; 0x11
	u8 Local_u8DigitNumber;
	s8 Local_s8Counter = -1 , Local_s8Iterator;
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[CLCD_SIZE_OF_ARRAY];
	do
	{
		Local_s8Counter++;
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	8f 5f       	subi	r24, 0xFF	; 255
    211c:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8DigitNumber = Copy_u32Number % 10;
    211e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2120:	9f 85       	ldd	r25, Y+15	; 0x0f
    2122:	a8 89       	ldd	r26, Y+16	; 0x10
    2124:	b9 89       	ldd	r27, Y+17	; 0x11
    2126:	2a e0       	ldi	r18, 0x0A	; 10
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 b4 20 	call	0x4168	; 0x4168 <__udivmodsi4>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	28 2f       	mov	r18, r24
    2140:	33 27       	eor	r19, r19
    2142:	27 fd       	sbrc	r18, 7
    2144:	30 95       	com	r19
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	48 2f       	mov	r20, r24
    214a:	40 5d       	subi	r20, 0xD0	; 208
    214c:	ce 01       	movw	r24, r28
    214e:	04 96       	adiw	r24, 0x04	; 4
    2150:	fc 01       	movw	r30, r24
    2152:	e2 0f       	add	r30, r18
    2154:	f3 1f       	adc	r31, r19
    2156:	40 83       	st	Z, r20
		Copy_u32Number /= 10;
    2158:	8e 85       	ldd	r24, Y+14	; 0x0e
    215a:	9f 85       	ldd	r25, Y+15	; 0x0f
    215c:	a8 89       	ldd	r26, Y+16	; 0x10
    215e:	b9 89       	ldd	r27, Y+17	; 0x11
    2160:	2a e0       	ldi	r18, 0x0A	; 10
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 b4 20 	call	0x4168	; 0x4168 <__udivmodsi4>
    2170:	da 01       	movw	r26, r20
    2172:	c9 01       	movw	r24, r18
    2174:	8e 87       	std	Y+14, r24	; 0x0e
    2176:	9f 87       	std	Y+15, r25	; 0x0f
    2178:	a8 8b       	std	Y+16, r26	; 0x10
    217a:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Copy_u32Number != 0);
    217c:	8e 85       	ldd	r24, Y+14	; 0x0e
    217e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2180:	a8 89       	ldd	r26, Y+16	; 0x10
    2182:	b9 89       	ldd	r27, Y+17	; 0x11
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	a1 05       	cpc	r26, r1
    2188:	b1 05       	cpc	r27, r1
    218a:	31 f6       	brne	.-116    	; 0x2118 <CLCD_voidSendNumber+0x20>
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	10 c0       	rjmp	.+32     	; 0x21b2 <CLCD_voidSendNumber+0xba>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	28 2f       	mov	r18, r24
    2196:	33 27       	eor	r19, r19
    2198:	27 fd       	sbrc	r18, 7
    219a:	30 95       	com	r19
    219c:	ce 01       	movw	r24, r28
    219e:	04 96       	adiw	r24, 0x04	; 4
    21a0:	fc 01       	movw	r30, r24
    21a2:	e2 0f       	add	r30, r18
    21a4:	f3 1f       	adc	r31, r19
    21a6:	80 81       	ld	r24, Z
    21a8:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
		Local_s8Counter++;
		Local_u8DigitNumber = Copy_u32Number % 10;
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
		Copy_u32Number /= 10;
	}while(Copy_u32Number != 0);
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	81 50       	subi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 23       	and	r24, r24
    21b6:	6c f7       	brge	.-38     	; 0x2192 <CLCD_voidSendNumber+0x9a>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
	}
}
    21b8:	61 96       	adiw	r28, 0x11	; 17
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <CLCD_voidIntegerToString>:

void CLCD_voidIntegerToString (u8 value)	// Display certain integer value on screen
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	61 97       	sbiw	r28, 0x11	; 17
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	89 8b       	std	Y+17, r24	; 0x11
	u8 number_str[16];
	itoa(value, number_str, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21e0:	89 89       	ldd	r24, Y+17	; 0x11
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9e 01       	movw	r18, r28
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	b9 01       	movw	r22, r18
    21ee:	4a e0       	ldi	r20, 0x0A	; 10
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	0e 94 0d 21 	call	0x421a	; 0x421a <itoa>
	CLCD_voidSendString(number_str);
    21f6:	ce 01       	movw	r24, r28
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
}
    21fe:	61 96       	adiw	r28, 0x11	; 17
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen (void)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	2a 97       	sbiw	r28, 0x0a	; 10
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	8a 83       	std	Y+2, r24	; 0x02
    223a:	6b 83       	std	Y+3, r22	; 0x03
    223c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    223e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	88 30       	cpi	r24, 0x08	; 8
    2244:	08 f0       	brcs	.+2      	; 0x2248 <DIO_u8SetPinDirection+0x24>
    2246:	b9 c1       	rjmp	.+882    	; 0x25ba <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    2248:	8c 81       	ldd	r24, Y+4	; 0x04
    224a:	88 23       	and	r24, r24
    224c:	09 f0       	breq	.+2      	; 0x2250 <DIO_u8SetPinDirection+0x2c>
    224e:	77 c0       	rjmp	.+238    	; 0x233e <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	3a 87       	std	Y+10, r19	; 0x0a
    2258:	29 87       	std	Y+9, r18	; 0x09
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	91 05       	cpc	r25, r1
    2262:	59 f1       	breq	.+86     	; 0x22ba <DIO_u8SetPinDirection+0x96>
    2264:	29 85       	ldd	r18, Y+9	; 0x09
    2266:	3a 85       	ldd	r19, Y+10	; 0x0a
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	31 05       	cpc	r19, r1
    226c:	2c f4       	brge	.+10     	; 0x2278 <DIO_u8SetPinDirection+0x54>
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	69 f0       	breq	.+26     	; 0x2290 <DIO_u8SetPinDirection+0x6c>
    2276:	60 c0       	rjmp	.+192    	; 0x2338 <DIO_u8SetPinDirection+0x114>
    2278:	29 85       	ldd	r18, Y+9	; 0x09
    227a:	3a 85       	ldd	r19, Y+10	; 0x0a
    227c:	22 30       	cpi	r18, 0x02	; 2
    227e:	31 05       	cpc	r19, r1
    2280:	89 f1       	breq	.+98     	; 0x22e4 <DIO_u8SetPinDirection+0xc0>
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	83 30       	cpi	r24, 0x03	; 3
    2288:	91 05       	cpc	r25, r1
    228a:	09 f4       	brne	.+2      	; 0x228e <DIO_u8SetPinDirection+0x6a>
    228c:	40 c0       	rjmp	.+128    	; 0x230e <DIO_u8SetPinDirection+0xea>
    228e:	54 c0       	rjmp	.+168    	; 0x2338 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    2290:	aa e3       	ldi	r26, 0x3A	; 58
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	ea e3       	ldi	r30, 0x3A	; 58
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	48 2f       	mov	r20, r24
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 2e       	mov	r0, r18
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <DIO_u8SetPinDirection+0x8a>
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <DIO_u8SetPinDirection+0x86>
    22b2:	80 95       	com	r24
    22b4:	84 23       	and	r24, r20
    22b6:	8c 93       	st	X, r24
    22b8:	82 c1       	rjmp	.+772    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    22ba:	a7 e3       	ldi	r26, 0x37	; 55
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e7 e3       	ldi	r30, 0x37	; 55
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	48 2f       	mov	r20, r24
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	02 2e       	mov	r0, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <DIO_u8SetPinDirection+0xb4>
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	0a 94       	dec	r0
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <DIO_u8SetPinDirection+0xb0>
    22dc:	80 95       	com	r24
    22de:	84 23       	and	r24, r20
    22e0:	8c 93       	st	X, r24
    22e2:	6d c1       	rjmp	.+730    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    22e4:	a4 e3       	ldi	r26, 0x34	; 52
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e4 e3       	ldi	r30, 0x34	; 52
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	48 2f       	mov	r20, r24
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	02 2e       	mov	r0, r18
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <DIO_u8SetPinDirection+0xde>
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	0a 94       	dec	r0
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <DIO_u8SetPinDirection+0xda>
    2306:	80 95       	com	r24
    2308:	84 23       	and	r24, r20
    230a:	8c 93       	st	X, r24
    230c:	58 c1       	rjmp	.+688    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    230e:	a1 e3       	ldi	r26, 0x31	; 49
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e1 e3       	ldi	r30, 0x31	; 49
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	48 2f       	mov	r20, r24
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	02 2e       	mov	r0, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <DIO_u8SetPinDirection+0x108>
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	0a 94       	dec	r0
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <DIO_u8SetPinDirection+0x104>
    2330:	80 95       	com	r24
    2332:	84 23       	and	r24, r20
    2334:	8c 93       	st	X, r24
    2336:	43 c1       	rjmp	.+646    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	40 c1       	rjmp	.+640    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	09 f0       	breq	.+2      	; 0x2346 <DIO_u8SetPinDirection+0x122>
    2344:	72 c0       	rjmp	.+228    	; 0x242a <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	38 87       	std	Y+8, r19	; 0x08
    234e:	2f 83       	std	Y+7, r18	; 0x07
    2350:	8f 81       	ldd	r24, Y+7	; 0x07
    2352:	98 85       	ldd	r25, Y+8	; 0x08
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	91 05       	cpc	r25, r1
    2358:	49 f1       	breq	.+82     	; 0x23ac <DIO_u8SetPinDirection+0x188>
    235a:	2f 81       	ldd	r18, Y+7	; 0x07
    235c:	38 85       	ldd	r19, Y+8	; 0x08
    235e:	22 30       	cpi	r18, 0x02	; 2
    2360:	31 05       	cpc	r19, r1
    2362:	2c f4       	brge	.+10     	; 0x236e <DIO_u8SetPinDirection+0x14a>
    2364:	8f 81       	ldd	r24, Y+7	; 0x07
    2366:	98 85       	ldd	r25, Y+8	; 0x08
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	61 f0       	breq	.+24     	; 0x2384 <DIO_u8SetPinDirection+0x160>
    236c:	5b c0       	rjmp	.+182    	; 0x2424 <DIO_u8SetPinDirection+0x200>
    236e:	2f 81       	ldd	r18, Y+7	; 0x07
    2370:	38 85       	ldd	r19, Y+8	; 0x08
    2372:	22 30       	cpi	r18, 0x02	; 2
    2374:	31 05       	cpc	r19, r1
    2376:	71 f1       	breq	.+92     	; 0x23d4 <DIO_u8SetPinDirection+0x1b0>
    2378:	8f 81       	ldd	r24, Y+7	; 0x07
    237a:	98 85       	ldd	r25, Y+8	; 0x08
    237c:	83 30       	cpi	r24, 0x03	; 3
    237e:	91 05       	cpc	r25, r1
    2380:	e9 f1       	breq	.+122    	; 0x23fc <DIO_u8SetPinDirection+0x1d8>
    2382:	50 c0       	rjmp	.+160    	; 0x2424 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    2384:	aa e3       	ldi	r26, 0x3A	; 58
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	ea e3       	ldi	r30, 0x3A	; 58
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	48 2f       	mov	r20, r24
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	02 2e       	mov	r0, r18
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <DIO_u8SetPinDirection+0x17e>
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	0a 94       	dec	r0
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <DIO_u8SetPinDirection+0x17a>
    23a6:	84 2b       	or	r24, r20
    23a8:	8c 93       	st	X, r24
    23aa:	09 c1       	rjmp	.+530    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    23ac:	a7 e3       	ldi	r26, 0x37	; 55
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e7 e3       	ldi	r30, 0x37	; 55
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	48 2f       	mov	r20, r24
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 2e       	mov	r0, r18
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <DIO_u8SetPinDirection+0x1a6>
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	0a 94       	dec	r0
    23cc:	e2 f7       	brpl	.-8      	; 0x23c6 <DIO_u8SetPinDirection+0x1a2>
    23ce:	84 2b       	or	r24, r20
    23d0:	8c 93       	st	X, r24
    23d2:	f5 c0       	rjmp	.+490    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    23d4:	a4 e3       	ldi	r26, 0x34	; 52
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e4 e3       	ldi	r30, 0x34	; 52
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	48 2f       	mov	r20, r24
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	02 2e       	mov	r0, r18
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <DIO_u8SetPinDirection+0x1ce>
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	0a 94       	dec	r0
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <DIO_u8SetPinDirection+0x1ca>
    23f6:	84 2b       	or	r24, r20
    23f8:	8c 93       	st	X, r24
    23fa:	e1 c0       	rjmp	.+450    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    23fc:	a1 e3       	ldi	r26, 0x31	; 49
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e1 e3       	ldi	r30, 0x31	; 49
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	48 2f       	mov	r20, r24
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 2e       	mov	r0, r18
    2414:	02 c0       	rjmp	.+4      	; 0x241a <DIO_u8SetPinDirection+0x1f6>
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	0a 94       	dec	r0
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <DIO_u8SetPinDirection+0x1f2>
    241e:	84 2b       	or	r24, r20
    2420:	8c 93       	st	X, r24
    2422:	cd c0       	rjmp	.+410    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	ca c0       	rjmp	.+404    	; 0x25be <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	82 30       	cpi	r24, 0x02	; 2
    242e:	09 f0       	breq	.+2      	; 0x2432 <DIO_u8SetPinDirection+0x20e>
    2430:	c1 c0       	rjmp	.+386    	; 0x25b4 <DIO_u8SetPinDirection+0x390>
			{
				switch(Copy_u8Port)
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	3e 83       	std	Y+6, r19	; 0x06
    243a:	2d 83       	std	Y+5, r18	; 0x05
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	91 05       	cpc	r25, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <DIO_u8SetPinDirection+0x224>
    2446:	3e c0       	rjmp	.+124    	; 0x24c4 <DIO_u8SetPinDirection+0x2a0>
    2448:	2d 81       	ldd	r18, Y+5	; 0x05
    244a:	3e 81       	ldd	r19, Y+6	; 0x06
    244c:	22 30       	cpi	r18, 0x02	; 2
    244e:	31 05       	cpc	r19, r1
    2450:	2c f4       	brge	.+10     	; 0x245c <DIO_u8SetPinDirection+0x238>
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	71 f0       	breq	.+28     	; 0x2476 <DIO_u8SetPinDirection+0x252>
    245a:	a9 c0       	rjmp	.+338    	; 0x25ae <DIO_u8SetPinDirection+0x38a>
    245c:	2d 81       	ldd	r18, Y+5	; 0x05
    245e:	3e 81       	ldd	r19, Y+6	; 0x06
    2460:	22 30       	cpi	r18, 0x02	; 2
    2462:	31 05       	cpc	r19, r1
    2464:	09 f4       	brne	.+2      	; 0x2468 <DIO_u8SetPinDirection+0x244>
    2466:	55 c0       	rjmp	.+170    	; 0x2512 <DIO_u8SetPinDirection+0x2ee>
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	83 30       	cpi	r24, 0x03	; 3
    246e:	91 05       	cpc	r25, r1
    2470:	09 f4       	brne	.+2      	; 0x2474 <DIO_u8SetPinDirection+0x250>
    2472:	76 c0       	rjmp	.+236    	; 0x2560 <DIO_u8SetPinDirection+0x33c>
    2474:	9c c0       	rjmp	.+312    	; 0x25ae <DIO_u8SetPinDirection+0x38a>
				{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
    2476:	aa e3       	ldi	r26, 0x3A	; 58
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	ea e3       	ldi	r30, 0x3A	; 58
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	48 2f       	mov	r20, r24
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <DIO_u8SetPinDirection+0x26e>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	2a 95       	dec	r18
    2494:	e2 f7       	brpl	.-8      	; 0x248e <DIO_u8SetPinDirection+0x26a>
    2496:	80 95       	com	r24
    2498:	84 23       	and	r24, r20
    249a:	8c 93       	st	X, r24
    249c:	ab e3       	ldi	r26, 0x3B	; 59
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	eb e3       	ldi	r30, 0x3B	; 59
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	48 2f       	mov	r20, r24
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	02 2e       	mov	r0, r18
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <DIO_u8SetPinDirection+0x296>
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	0a 94       	dec	r0
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <DIO_u8SetPinDirection+0x292>
    24be:	84 2b       	or	r24, r20
    24c0:	8c 93       	st	X, r24
    24c2:	7d c0       	rjmp	.+250    	; 0x25be <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
    24c4:	a7 e3       	ldi	r26, 0x37	; 55
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e7 e3       	ldi	r30, 0x37	; 55
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <DIO_u8SetPinDirection+0x2bc>
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	2a 95       	dec	r18
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <DIO_u8SetPinDirection+0x2b8>
    24e4:	80 95       	com	r24
    24e6:	84 23       	and	r24, r20
    24e8:	8c 93       	st	X, r24
    24ea:	a8 e3       	ldi	r26, 0x38	; 56
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e8 e3       	ldi	r30, 0x38	; 56
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	48 2f       	mov	r20, r24
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	02 2e       	mov	r0, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <DIO_u8SetPinDirection+0x2e4>
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	0a 94       	dec	r0
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <DIO_u8SetPinDirection+0x2e0>
    250c:	84 2b       	or	r24, r20
    250e:	8c 93       	st	X, r24
    2510:	56 c0       	rjmp	.+172    	; 0x25be <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
    2512:	a4 e3       	ldi	r26, 0x34	; 52
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e4 e3       	ldi	r30, 0x34	; 52
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	48 2f       	mov	r20, r24
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	02 c0       	rjmp	.+4      	; 0x252e <DIO_u8SetPinDirection+0x30a>
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	2a 95       	dec	r18
    2530:	e2 f7       	brpl	.-8      	; 0x252a <DIO_u8SetPinDirection+0x306>
    2532:	80 95       	com	r24
    2534:	84 23       	and	r24, r20
    2536:	8c 93       	st	X, r24
    2538:	a5 e3       	ldi	r26, 0x35	; 53
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e5 e3       	ldi	r30, 0x35	; 53
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	48 2f       	mov	r20, r24
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	02 2e       	mov	r0, r18
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <DIO_u8SetPinDirection+0x332>
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	0a 94       	dec	r0
    2558:	e2 f7       	brpl	.-8      	; 0x2552 <DIO_u8SetPinDirection+0x32e>
    255a:	84 2b       	or	r24, r20
    255c:	8c 93       	st	X, r24
    255e:	2f c0       	rjmp	.+94     	; 0x25be <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
    2560:	a1 e3       	ldi	r26, 0x31	; 49
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e1 e3       	ldi	r30, 0x31	; 49
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	48 2f       	mov	r20, r24
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_u8SetPinDirection+0x358>
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	2a 95       	dec	r18
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <DIO_u8SetPinDirection+0x354>
    2580:	80 95       	com	r24
    2582:	84 23       	and	r24, r20
    2584:	8c 93       	st	X, r24
    2586:	a2 e3       	ldi	r26, 0x32	; 50
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e2 e3       	ldi	r30, 0x32	; 50
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	48 2f       	mov	r20, r24
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 2e       	mov	r0, r18
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <DIO_u8SetPinDirection+0x380>
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	0a 94       	dec	r0
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <DIO_u8SetPinDirection+0x37c>
    25a8:	84 2b       	or	r24, r20
    25aa:	8c 93       	st	X, r24
    25ac:	08 c0       	rjmp	.+16     	; 0x25be <DIO_u8SetPinDirection+0x39a>
				default: Local_u8ErrorState=1; break;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <DIO_u8SetPinDirection+0x39a>
				}
			}
		else
		{
			Local_u8ErrorState=1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    25be:	89 81       	ldd	r24, Y+1	; 0x01
}
    25c0:	2a 96       	adiw	r28, 0x0a	; 10
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <DIO_u8SetPortDirection+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <DIO_u8SetPortDirection+0x8>
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	8a 83       	std	Y+2, r24	; 0x02
    25e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    25e4:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	3d 83       	std	Y+5, r19	; 0x05
    25ee:	2c 83       	std	Y+4, r18	; 0x04
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	9d 81       	ldd	r25, Y+5	; 0x05
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	91 05       	cpc	r25, r1
    25f8:	d1 f0       	breq	.+52     	; 0x262e <DIO_u8SetPortDirection+0x5c>
    25fa:	2c 81       	ldd	r18, Y+4	; 0x04
    25fc:	3d 81       	ldd	r19, Y+5	; 0x05
    25fe:	22 30       	cpi	r18, 0x02	; 2
    2600:	31 05       	cpc	r19, r1
    2602:	2c f4       	brge	.+10     	; 0x260e <DIO_u8SetPortDirection+0x3c>
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	9d 81       	ldd	r25, Y+5	; 0x05
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	61 f0       	breq	.+24     	; 0x2624 <DIO_u8SetPortDirection+0x52>
    260c:	1f c0       	rjmp	.+62     	; 0x264c <DIO_u8SetPortDirection+0x7a>
    260e:	2c 81       	ldd	r18, Y+4	; 0x04
    2610:	3d 81       	ldd	r19, Y+5	; 0x05
    2612:	22 30       	cpi	r18, 0x02	; 2
    2614:	31 05       	cpc	r19, r1
    2616:	81 f0       	breq	.+32     	; 0x2638 <DIO_u8SetPortDirection+0x66>
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	9d 81       	ldd	r25, Y+5	; 0x05
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	91 05       	cpc	r25, r1
    2620:	81 f0       	breq	.+32     	; 0x2642 <DIO_u8SetPortDirection+0x70>
    2622:	14 c0       	rjmp	.+40     	; 0x264c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    2624:	ea e3       	ldi	r30, 0x3A	; 58
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	80 83       	st	Z, r24
    262c:	11 c0       	rjmp	.+34     	; 0x2650 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    262e:	e7 e3       	ldi	r30, 0x37	; 55
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	80 83       	st	Z, r24
    2636:	0c c0       	rjmp	.+24     	; 0x2650 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    2638:	e4 e3       	ldi	r30, 0x34	; 52
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	80 83       	st	Z, r24
    2640:	07 c0       	rjmp	.+14     	; 0x2650 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    2642:	e1 e3       	ldi	r30, 0x31	; 49
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	80 83       	st	Z, r24
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2650:	89 81       	ldd	r24, Y+1	; 0x01
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	28 97       	sbiw	r28, 0x08	; 8
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	8a 83       	std	Y+2, r24	; 0x02
    2678:	6b 83       	std	Y+3, r22	; 0x03
    267a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    267c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	88 30       	cpi	r24, 0x08	; 8
    2682:	08 f0       	brcs	.+2      	; 0x2686 <DIO_u8SetPinValue+0x24>
    2684:	f4 c0       	rjmp	.+488    	; 0x286e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	88 23       	and	r24, r24
    268a:	09 f0       	breq	.+2      	; 0x268e <DIO_u8SetPinValue+0x2c>
    268c:	77 c0       	rjmp	.+238    	; 0x277c <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	38 87       	std	Y+8, r19	; 0x08
    2696:	2f 83       	std	Y+7, r18	; 0x07
    2698:	8f 81       	ldd	r24, Y+7	; 0x07
    269a:	98 85       	ldd	r25, Y+8	; 0x08
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	91 05       	cpc	r25, r1
    26a0:	59 f1       	breq	.+86     	; 0x26f8 <DIO_u8SetPinValue+0x96>
    26a2:	2f 81       	ldd	r18, Y+7	; 0x07
    26a4:	38 85       	ldd	r19, Y+8	; 0x08
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <DIO_u8SetPinValue+0x54>
    26ac:	8f 81       	ldd	r24, Y+7	; 0x07
    26ae:	98 85       	ldd	r25, Y+8	; 0x08
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	69 f0       	breq	.+26     	; 0x26ce <DIO_u8SetPinValue+0x6c>
    26b4:	60 c0       	rjmp	.+192    	; 0x2776 <DIO_u8SetPinValue+0x114>
    26b6:	2f 81       	ldd	r18, Y+7	; 0x07
    26b8:	38 85       	ldd	r19, Y+8	; 0x08
    26ba:	22 30       	cpi	r18, 0x02	; 2
    26bc:	31 05       	cpc	r19, r1
    26be:	89 f1       	breq	.+98     	; 0x2722 <DIO_u8SetPinValue+0xc0>
    26c0:	8f 81       	ldd	r24, Y+7	; 0x07
    26c2:	98 85       	ldd	r25, Y+8	; 0x08
    26c4:	83 30       	cpi	r24, 0x03	; 3
    26c6:	91 05       	cpc	r25, r1
    26c8:	09 f4       	brne	.+2      	; 0x26cc <DIO_u8SetPinValue+0x6a>
    26ca:	40 c0       	rjmp	.+128    	; 0x274c <DIO_u8SetPinValue+0xea>
    26cc:	54 c0       	rjmp	.+168    	; 0x2776 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    26ce:	ab e3       	ldi	r26, 0x3B	; 59
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	eb e3       	ldi	r30, 0x3B	; 59
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	48 2f       	mov	r20, r24
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	02 2e       	mov	r0, r18
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <DIO_u8SetPinValue+0x8a>
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	0a 94       	dec	r0
    26ee:	e2 f7       	brpl	.-8      	; 0x26e8 <DIO_u8SetPinValue+0x86>
    26f0:	80 95       	com	r24
    26f2:	84 23       	and	r24, r20
    26f4:	8c 93       	st	X, r24
    26f6:	bd c0       	rjmp	.+378    	; 0x2872 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    26f8:	a8 e3       	ldi	r26, 0x38	; 56
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e8 e3       	ldi	r30, 0x38	; 56
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	48 2f       	mov	r20, r24
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	02 2e       	mov	r0, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_u8SetPinValue+0xb4>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	0a 94       	dec	r0
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <DIO_u8SetPinValue+0xb0>
    271a:	80 95       	com	r24
    271c:	84 23       	and	r24, r20
    271e:	8c 93       	st	X, r24
    2720:	a8 c0       	rjmp	.+336    	; 0x2872 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2722:	a5 e3       	ldi	r26, 0x35	; 53
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e5 e3       	ldi	r30, 0x35	; 53
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	48 2f       	mov	r20, r24
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	02 2e       	mov	r0, r18
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <DIO_u8SetPinValue+0xde>
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	0a 94       	dec	r0
    2742:	e2 f7       	brpl	.-8      	; 0x273c <DIO_u8SetPinValue+0xda>
    2744:	80 95       	com	r24
    2746:	84 23       	and	r24, r20
    2748:	8c 93       	st	X, r24
    274a:	93 c0       	rjmp	.+294    	; 0x2872 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    274c:	a2 e3       	ldi	r26, 0x32	; 50
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e2 e3       	ldi	r30, 0x32	; 50
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	48 2f       	mov	r20, r24
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	02 2e       	mov	r0, r18
    2764:	02 c0       	rjmp	.+4      	; 0x276a <DIO_u8SetPinValue+0x108>
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	0a 94       	dec	r0
    276c:	e2 f7       	brpl	.-8      	; 0x2766 <DIO_u8SetPinValue+0x104>
    276e:	80 95       	com	r24
    2770:	84 23       	and	r24, r20
    2772:	8c 93       	st	X, r24
    2774:	7e c0       	rjmp	.+252    	; 0x2872 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	7b c0       	rjmp	.+246    	; 0x2872 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    277c:	8c 81       	ldd	r24, Y+4	; 0x04
    277e:	81 30       	cpi	r24, 0x01	; 1
    2780:	09 f0       	breq	.+2      	; 0x2784 <DIO_u8SetPinValue+0x122>
    2782:	72 c0       	rjmp	.+228    	; 0x2868 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	3e 83       	std	Y+6, r19	; 0x06
    278c:	2d 83       	std	Y+5, r18	; 0x05
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	81 30       	cpi	r24, 0x01	; 1
    2794:	91 05       	cpc	r25, r1
    2796:	49 f1       	breq	.+82     	; 0x27ea <DIO_u8SetPinValue+0x188>
    2798:	2d 81       	ldd	r18, Y+5	; 0x05
    279a:	3e 81       	ldd	r19, Y+6	; 0x06
    279c:	22 30       	cpi	r18, 0x02	; 2
    279e:	31 05       	cpc	r19, r1
    27a0:	2c f4       	brge	.+10     	; 0x27ac <DIO_u8SetPinValue+0x14a>
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	61 f0       	breq	.+24     	; 0x27c2 <DIO_u8SetPinValue+0x160>
    27aa:	5b c0       	rjmp	.+182    	; 0x2862 <DIO_u8SetPinValue+0x200>
    27ac:	2d 81       	ldd	r18, Y+5	; 0x05
    27ae:	3e 81       	ldd	r19, Y+6	; 0x06
    27b0:	22 30       	cpi	r18, 0x02	; 2
    27b2:	31 05       	cpc	r19, r1
    27b4:	71 f1       	breq	.+92     	; 0x2812 <DIO_u8SetPinValue+0x1b0>
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	83 30       	cpi	r24, 0x03	; 3
    27bc:	91 05       	cpc	r25, r1
    27be:	e9 f1       	breq	.+122    	; 0x283a <DIO_u8SetPinValue+0x1d8>
    27c0:	50 c0       	rjmp	.+160    	; 0x2862 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    27c2:	ab e3       	ldi	r26, 0x3B	; 59
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	eb e3       	ldi	r30, 0x3B	; 59
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	48 2f       	mov	r20, r24
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	02 2e       	mov	r0, r18
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <DIO_u8SetPinValue+0x17e>
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	0a 94       	dec	r0
    27e2:	e2 f7       	brpl	.-8      	; 0x27dc <DIO_u8SetPinValue+0x17a>
    27e4:	84 2b       	or	r24, r20
    27e6:	8c 93       	st	X, r24
    27e8:	44 c0       	rjmp	.+136    	; 0x2872 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    27ea:	a8 e3       	ldi	r26, 0x38	; 56
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e8 e3       	ldi	r30, 0x38	; 56
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	48 2f       	mov	r20, r24
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	02 2e       	mov	r0, r18
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <DIO_u8SetPinValue+0x1a6>
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	0a 94       	dec	r0
    280a:	e2 f7       	brpl	.-8      	; 0x2804 <DIO_u8SetPinValue+0x1a2>
    280c:	84 2b       	or	r24, r20
    280e:	8c 93       	st	X, r24
    2810:	30 c0       	rjmp	.+96     	; 0x2872 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2812:	a5 e3       	ldi	r26, 0x35	; 53
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e5 e3       	ldi	r30, 0x35	; 53
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	48 2f       	mov	r20, r24
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	02 2e       	mov	r0, r18
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <DIO_u8SetPinValue+0x1ce>
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	0a 94       	dec	r0
    2832:	e2 f7       	brpl	.-8      	; 0x282c <DIO_u8SetPinValue+0x1ca>
    2834:	84 2b       	or	r24, r20
    2836:	8c 93       	st	X, r24
    2838:	1c c0       	rjmp	.+56     	; 0x2872 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    283a:	a2 e3       	ldi	r26, 0x32	; 50
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e2 e3       	ldi	r30, 0x32	; 50
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	48 2f       	mov	r20, r24
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	02 2e       	mov	r0, r18
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <DIO_u8SetPinValue+0x1f6>
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	0a 94       	dec	r0
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <DIO_u8SetPinValue+0x1f2>
    285c:	84 2b       	or	r24, r20
    285e:	8c 93       	st	X, r24
    2860:	08 c0       	rjmp	.+16     	; 0x2872 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	05 c0       	rjmp	.+10     	; 0x2872 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2872:	89 81       	ldd	r24, Y+1	; 0x01
}
    2874:	28 96       	adiw	r28, 0x08	; 8
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	00 d0       	rcall	.+0      	; 0x288c <DIO_u8SetPortValue+0x6>
    288c:	00 d0       	rcall	.+0      	; 0x288e <DIO_u8SetPortValue+0x8>
    288e:	0f 92       	push	r0
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	8a 83       	std	Y+2, r24	; 0x02
    2896:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2898:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	3d 83       	std	Y+5, r19	; 0x05
    28a2:	2c 83       	std	Y+4, r18	; 0x04
    28a4:	8c 81       	ldd	r24, Y+4	; 0x04
    28a6:	9d 81       	ldd	r25, Y+5	; 0x05
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	91 05       	cpc	r25, r1
    28ac:	d1 f0       	breq	.+52     	; 0x28e2 <DIO_u8SetPortValue+0x5c>
    28ae:	2c 81       	ldd	r18, Y+4	; 0x04
    28b0:	3d 81       	ldd	r19, Y+5	; 0x05
    28b2:	22 30       	cpi	r18, 0x02	; 2
    28b4:	31 05       	cpc	r19, r1
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <DIO_u8SetPortValue+0x3c>
    28b8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ba:	9d 81       	ldd	r25, Y+5	; 0x05
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	61 f0       	breq	.+24     	; 0x28d8 <DIO_u8SetPortValue+0x52>
    28c0:	1f c0       	rjmp	.+62     	; 0x2900 <DIO_u8SetPortValue+0x7a>
    28c2:	2c 81       	ldd	r18, Y+4	; 0x04
    28c4:	3d 81       	ldd	r19, Y+5	; 0x05
    28c6:	22 30       	cpi	r18, 0x02	; 2
    28c8:	31 05       	cpc	r19, r1
    28ca:	81 f0       	breq	.+32     	; 0x28ec <DIO_u8SetPortValue+0x66>
    28cc:	8c 81       	ldd	r24, Y+4	; 0x04
    28ce:	9d 81       	ldd	r25, Y+5	; 0x05
    28d0:	83 30       	cpi	r24, 0x03	; 3
    28d2:	91 05       	cpc	r25, r1
    28d4:	81 f0       	breq	.+32     	; 0x28f6 <DIO_u8SetPortValue+0x70>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    28d8:	eb e3       	ldi	r30, 0x3B	; 59
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	80 83       	st	Z, r24
    28e0:	11 c0       	rjmp	.+34     	; 0x2904 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    28e2:	e8 e3       	ldi	r30, 0x38	; 56
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	80 83       	st	Z, r24
    28ea:	0c c0       	rjmp	.+24     	; 0x2904 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    28ec:	e5 e3       	ldi	r30, 0x35	; 53
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	80 83       	st	Z, r24
    28f4:	07 c0       	rjmp	.+14     	; 0x2904 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    28f6:	e2 e3       	ldi	r30, 0x32	; 50
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	80 83       	st	Z, r24
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2904:	89 81       	ldd	r24, Y+1	; 0x01
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <DIO_u8TogglePinValue+0x6>
    291c:	00 d0       	rcall	.+0      	; 0x291e <DIO_u8TogglePinValue+0x8>
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8a 83       	std	Y+2, r24	; 0x02
    2926:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2928:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	3d 83       	std	Y+5, r19	; 0x05
    2932:	2c 83       	std	Y+4, r18	; 0x04
    2934:	8c 81       	ldd	r24, Y+4	; 0x04
    2936:	9d 81       	ldd	r25, Y+5	; 0x05
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	91 05       	cpc	r25, r1
    293c:	49 f1       	breq	.+82     	; 0x2990 <DIO_u8TogglePinValue+0x7a>
    293e:	2c 81       	ldd	r18, Y+4	; 0x04
    2940:	3d 81       	ldd	r19, Y+5	; 0x05
    2942:	22 30       	cpi	r18, 0x02	; 2
    2944:	31 05       	cpc	r19, r1
    2946:	2c f4       	brge	.+10     	; 0x2952 <DIO_u8TogglePinValue+0x3c>
    2948:	8c 81       	ldd	r24, Y+4	; 0x04
    294a:	9d 81       	ldd	r25, Y+5	; 0x05
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	61 f0       	breq	.+24     	; 0x2968 <DIO_u8TogglePinValue+0x52>
    2950:	5b c0       	rjmp	.+182    	; 0x2a08 <DIO_u8TogglePinValue+0xf2>
    2952:	2c 81       	ldd	r18, Y+4	; 0x04
    2954:	3d 81       	ldd	r19, Y+5	; 0x05
    2956:	22 30       	cpi	r18, 0x02	; 2
    2958:	31 05       	cpc	r19, r1
    295a:	71 f1       	breq	.+92     	; 0x29b8 <DIO_u8TogglePinValue+0xa2>
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	9d 81       	ldd	r25, Y+5	; 0x05
    2960:	83 30       	cpi	r24, 0x03	; 3
    2962:	91 05       	cpc	r25, r1
    2964:	e9 f1       	breq	.+122    	; 0x29e0 <DIO_u8TogglePinValue+0xca>
    2966:	50 c0       	rjmp	.+160    	; 0x2a08 <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    2968:	ab e3       	ldi	r26, 0x3B	; 59
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	eb e3       	ldi	r30, 0x3B	; 59
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <DIO_u8TogglePinValue+0x70>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <DIO_u8TogglePinValue+0x6c>
    298a:	84 27       	eor	r24, r20
    298c:	8c 93       	st	X, r24
    298e:	3e c0       	rjmp	.+124    	; 0x2a0c <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    2990:	a8 e3       	ldi	r26, 0x38	; 56
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e8 e3       	ldi	r30, 0x38	; 56
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	48 2f       	mov	r20, r24
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	02 2e       	mov	r0, r18
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <DIO_u8TogglePinValue+0x98>
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	0a 94       	dec	r0
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <DIO_u8TogglePinValue+0x94>
    29b2:	84 27       	eor	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	2a c0       	rjmp	.+84     	; 0x2a0c <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    29b8:	a5 e3       	ldi	r26, 0x35	; 53
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e5 e3       	ldi	r30, 0x35	; 53
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	48 2f       	mov	r20, r24
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	02 2e       	mov	r0, r18
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <DIO_u8TogglePinValue+0xc0>
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	0a 94       	dec	r0
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <DIO_u8TogglePinValue+0xbc>
    29da:	84 27       	eor	r24, r20
    29dc:	8c 93       	st	X, r24
    29de:	16 c0       	rjmp	.+44     	; 0x2a0c <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    29e0:	a2 e3       	ldi	r26, 0x32	; 50
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e2 e3       	ldi	r30, 0x32	; 50
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	48 2f       	mov	r20, r24
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	02 2e       	mov	r0, r18
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <DIO_u8TogglePinValue+0xe8>
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	0a 94       	dec	r0
    2a00:	e2 f7       	brpl	.-8      	; 0x29fa <DIO_u8TogglePinValue+0xe4>
    2a02:	84 27       	eor	r24, r20
    2a04:	8c 93       	st	X, r24
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	27 97       	sbiw	r28, 0x07	; 7
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	8a 83       	std	Y+2, r24	; 0x02
    2a34:	6b 83       	std	Y+3, r22	; 0x03
    2a36:	5d 83       	std	Y+5, r21	; 0x05
    2a38:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2a3a:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <DIO_u8GetPinValue+0x28>
    2a44:	78 c0       	rjmp	.+240    	; 0x2b36 <DIO_u8GetPinValue+0x118>
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	88 30       	cpi	r24, 0x08	; 8
    2a4a:	08 f0       	brcs	.+2      	; 0x2a4e <DIO_u8GetPinValue+0x30>
    2a4c:	74 c0       	rjmp	.+232    	; 0x2b36 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	3f 83       	std	Y+7, r19	; 0x07
    2a56:	2e 83       	std	Y+6, r18	; 0x06
    2a58:	4e 81       	ldd	r20, Y+6	; 0x06
    2a5a:	5f 81       	ldd	r21, Y+7	; 0x07
    2a5c:	41 30       	cpi	r20, 0x01	; 1
    2a5e:	51 05       	cpc	r21, r1
    2a60:	59 f1       	breq	.+86     	; 0x2ab8 <DIO_u8GetPinValue+0x9a>
    2a62:	8e 81       	ldd	r24, Y+6	; 0x06
    2a64:	9f 81       	ldd	r25, Y+7	; 0x07
    2a66:	82 30       	cpi	r24, 0x02	; 2
    2a68:	91 05       	cpc	r25, r1
    2a6a:	34 f4       	brge	.+12     	; 0x2a78 <DIO_u8GetPinValue+0x5a>
    2a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a70:	21 15       	cp	r18, r1
    2a72:	31 05       	cpc	r19, r1
    2a74:	69 f0       	breq	.+26     	; 0x2a90 <DIO_u8GetPinValue+0x72>
    2a76:	5c c0       	rjmp	.+184    	; 0x2b30 <DIO_u8GetPinValue+0x112>
    2a78:	4e 81       	ldd	r20, Y+6	; 0x06
    2a7a:	5f 81       	ldd	r21, Y+7	; 0x07
    2a7c:	42 30       	cpi	r20, 0x02	; 2
    2a7e:	51 05       	cpc	r21, r1
    2a80:	79 f1       	breq	.+94     	; 0x2ae0 <DIO_u8GetPinValue+0xc2>
    2a82:	8e 81       	ldd	r24, Y+6	; 0x06
    2a84:	9f 81       	ldd	r25, Y+7	; 0x07
    2a86:	83 30       	cpi	r24, 0x03	; 3
    2a88:	91 05       	cpc	r25, r1
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <DIO_u8GetPinValue+0x70>
    2a8c:	3d c0       	rjmp	.+122    	; 0x2b08 <DIO_u8GetPinValue+0xea>
    2a8e:	50 c0       	rjmp	.+160    	; 0x2b30 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    2a90:	e9 e3       	ldi	r30, 0x39	; 57
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	88 2f       	mov	r24, r24
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	a9 01       	movw	r20, r18
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <DIO_u8GetPinValue+0x8a>
    2aa4:	55 95       	asr	r21
    2aa6:	47 95       	ror	r20
    2aa8:	8a 95       	dec	r24
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <DIO_u8GetPinValue+0x86>
    2aac:	ca 01       	movw	r24, r20
    2aae:	81 70       	andi	r24, 0x01	; 1
    2ab0:	ec 81       	ldd	r30, Y+4	; 0x04
    2ab2:	fd 81       	ldd	r31, Y+5	; 0x05
    2ab4:	80 83       	st	Z, r24
    2ab6:	41 c0       	rjmp	.+130    	; 0x2b3a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    2ab8:	e6 e3       	ldi	r30, 0x36	; 54
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	88 2f       	mov	r24, r24
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a9 01       	movw	r20, r18
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <DIO_u8GetPinValue+0xb2>
    2acc:	55 95       	asr	r21
    2ace:	47 95       	ror	r20
    2ad0:	8a 95       	dec	r24
    2ad2:	e2 f7       	brpl	.-8      	; 0x2acc <DIO_u8GetPinValue+0xae>
    2ad4:	ca 01       	movw	r24, r20
    2ad6:	81 70       	andi	r24, 0x01	; 1
    2ad8:	ec 81       	ldd	r30, Y+4	; 0x04
    2ada:	fd 81       	ldd	r31, Y+5	; 0x05
    2adc:	80 83       	st	Z, r24
    2ade:	2d c0       	rjmp	.+90     	; 0x2b3a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    2ae0:	e3 e3       	ldi	r30, 0x33	; 51
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	88 2f       	mov	r24, r24
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a9 01       	movw	r20, r18
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DIO_u8GetPinValue+0xda>
    2af4:	55 95       	asr	r21
    2af6:	47 95       	ror	r20
    2af8:	8a 95       	dec	r24
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <DIO_u8GetPinValue+0xd6>
    2afc:	ca 01       	movw	r24, r20
    2afe:	81 70       	andi	r24, 0x01	; 1
    2b00:	ec 81       	ldd	r30, Y+4	; 0x04
    2b02:	fd 81       	ldd	r31, Y+5	; 0x05
    2b04:	80 83       	st	Z, r24
    2b06:	19 c0       	rjmp	.+50     	; 0x2b3a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    2b08:	e0 e3       	ldi	r30, 0x30	; 48
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a9 01       	movw	r20, r18
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <DIO_u8GetPinValue+0x102>
    2b1c:	55 95       	asr	r21
    2b1e:	47 95       	ror	r20
    2b20:	8a 95       	dec	r24
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <DIO_u8GetPinValue+0xfe>
    2b24:	ca 01       	movw	r24, r20
    2b26:	81 70       	andi	r24, 0x01	; 1
    2b28:	ec 81       	ldd	r30, Y+4	; 0x04
    2b2a:	fd 81       	ldd	r31, Y+5	; 0x05
    2b2c:	80 83       	st	Z, r24
    2b2e:	05 c0       	rjmp	.+10     	; 0x2b3a <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b3c:	27 96       	adiw	r28, 0x07	; 7
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	27 97       	sbiw	r28, 0x07	; 7
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	8b 83       	std	Y+3, r24	; 0x03
    2b64:	7d 83       	std	Y+5, r23	; 0x05
    2b66:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = 0;
    2b68:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_pu8Value != NULL)
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <DIO_u8GetPortValue+0x26>
    2b72:	3e c0       	rjmp	.+124    	; 0x2bf0 <DIO_u8GetPortValue+0xa2>
	{
		switch(Copy_u8Port)
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	3f 83       	std	Y+7, r19	; 0x07
    2b7c:	2e 83       	std	Y+6, r18	; 0x06
    2b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b80:	9f 81       	ldd	r25, Y+7	; 0x07
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	91 05       	cpc	r25, r1
    2b86:	e1 f0       	breq	.+56     	; 0x2bc0 <DIO_u8GetPortValue+0x72>
    2b88:	2e 81       	ldd	r18, Y+6	; 0x06
    2b8a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b8c:	22 30       	cpi	r18, 0x02	; 2
    2b8e:	31 05       	cpc	r19, r1
    2b90:	2c f4       	brge	.+10     	; 0x2b9c <DIO_u8GetPortValue+0x4e>
    2b92:	8e 81       	ldd	r24, Y+6	; 0x06
    2b94:	9f 81       	ldd	r25, Y+7	; 0x07
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	61 f0       	breq	.+24     	; 0x2bb2 <DIO_u8GetPortValue+0x64>
    2b9a:	27 c0       	rjmp	.+78     	; 0x2bea <DIO_u8GetPortValue+0x9c>
    2b9c:	2e 81       	ldd	r18, Y+6	; 0x06
    2b9e:	3f 81       	ldd	r19, Y+7	; 0x07
    2ba0:	22 30       	cpi	r18, 0x02	; 2
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	a1 f0       	breq	.+40     	; 0x2bce <DIO_u8GetPortValue+0x80>
    2ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba8:	9f 81       	ldd	r25, Y+7	; 0x07
    2baa:	83 30       	cpi	r24, 0x03	; 3
    2bac:	91 05       	cpc	r25, r1
    2bae:	b1 f0       	breq	.+44     	; 0x2bdc <DIO_u8GetPortValue+0x8e>
    2bb0:	1c c0       	rjmp	.+56     	; 0x2bea <DIO_u8GetPortValue+0x9c>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    2bb2:	e9 e3       	ldi	r30, 0x39	; 57
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    2bba:	fd 81       	ldd	r31, Y+5	; 0x05
    2bbc:	80 83       	st	Z, r24
    2bbe:	1a c0       	rjmp	.+52     	; 0x2bf4 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    2bc0:	e6 e3       	ldi	r30, 0x36	; 54
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	ec 81       	ldd	r30, Y+4	; 0x04
    2bc8:	fd 81       	ldd	r31, Y+5	; 0x05
    2bca:	80 83       	st	Z, r24
    2bcc:	13 c0       	rjmp	.+38     	; 0x2bf4 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    2bce:	e3 e3       	ldi	r30, 0x33	; 51
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	ec 81       	ldd	r30, Y+4	; 0x04
    2bd6:	fd 81       	ldd	r31, Y+5	; 0x05
    2bd8:	80 83       	st	Z, r24
    2bda:	0c c0       	rjmp	.+24     	; 0x2bf4 <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    2bdc:	e0 e3       	ldi	r30, 0x30	; 48
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	ec 81       	ldd	r30, Y+4	; 0x04
    2be4:	fd 81       	ldd	r31, Y+5	; 0x05
    2be6:	80 83       	st	Z, r24
    2be8:	05 c0       	rjmp	.+10     	; 0x2bf4 <DIO_u8GetPortValue+0xa6>
		default: Local_u8ErrorState = 1; break;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	8a 83       	std	Y+2, r24	; 0x02
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <DIO_u8GetPortValue+0xa6>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2bf6:	27 96       	adiw	r28, 0x07	; 7
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2c10:	af e5       	ldi	r26, 0x5F	; 95
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ef e5       	ldi	r30, 0x5F	; 95
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 68       	ori	r24, 0x80	; 128
    2c1c:	8c 93       	st	X, r24
}
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2c2c:	af e5       	ldi	r26, 0x5F	; 95
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	ef e5       	ldi	r30, 0x5F	; 95
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	8f 77       	andi	r24, 0x7F	; 127
    2c38:	8c 93       	st	X, r24
    2c3a:	cf 91       	pop	r28
    2c3c:	df 91       	pop	r29
    2c3e:	08 95       	ret

00002c40 <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
	CLR_BIT(TIMSK,TIMSK_OCIE0);

	TCNT0=TIMER0_f32PreloodValue;
#elif TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	SET_BIT(TCCR0,TCCR0_WGM00);
    2c48:	a3 e5       	ldi	r26, 0x53	; 83
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	e3 e5       	ldi	r30, 0x53	; 83
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	80 64       	ori	r24, 0x40	; 64
    2c54:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
    2c56:	a3 e5       	ldi	r26, 0x53	; 83
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e3 e5       	ldi	r30, 0x53	; 83
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	87 7f       	andi	r24, 0xF7	; 247
    2c62:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
#elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
	SET_BIT(TCCR0,TCCR0_COM00);
	CLR_BIT(TCCR0,TCCR0_COM01);
#elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
	CLR_BIT(TCCR0,TCCR0_COM00);
    2c64:	a3 e5       	ldi	r26, 0x53	; 83
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e3 e5       	ldi	r30, 0x53	; 83
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	8f 7e       	andi	r24, 0xEF	; 239
    2c70:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    2c72:	a3 e5       	ldi	r26, 0x53	; 83
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e3 e5       	ldi	r30, 0x53	; 83
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	80 62       	ori	r24, 0x20	; 32
    2c7e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
	TIMER0_u16Prescaller=256;
#elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_1024
	SET_BIT(TCCR0,TCCR0_CS00);
    2c80:	a3 e5       	ldi	r26, 0x53	; 83
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e3 e5       	ldi	r30, 0x53	; 83
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	81 60       	ori	r24, 0x01	; 1
    2c8c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    2c8e:	a3 e5       	ldi	r26, 0x53	; 83
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e3 e5       	ldi	r30, 0x53	; 83
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	8d 7f       	andi	r24, 0xFD	; 253
    2c9a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS02);
    2c9c:	a3 e5       	ldi	r26, 0x53	; 83
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e3 e5       	ldi	r30, 0x53	; 83
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	84 60       	ori	r24, 0x04	; 4
    2ca8:	8c 93       	st	X, r24
	TIMER0_u16Prescaller=1024;
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 e8       	ldi	r26, 0x80	; 128
    2cb0:	b4 e4       	ldi	r27, 0x44	; 68
    2cb2:	80 93 99 00 	sts	0x0099, r24
    2cb6:	90 93 9a 00 	sts	0x009A, r25
    2cba:	a0 93 9b 00 	sts	0x009B, r26
    2cbe:	b0 93 9c 00 	sts	0x009C, r27
	SET_BIT(TCCR0,TCCR0_CS00);
	SET_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
	TIMER0_u16Prescaller=0;
#endif
}
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <TIMER_voidTimer0Delay+0x6>
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <TIMER_voidTimer0Delay+0x8>
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <TIMER_voidTimer0Delay+0xa>
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	69 83       	std	Y+1, r22	; 0x01
    2cd8:	7a 83       	std	Y+2, r23	; 0x02
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	5e 83       	std	Y+6, r21	; 0x06
    2ce0:	4d 83       	std	Y+5, r20	; 0x05
#elif TIMER0_MODE  == TIMER0_MODE_CTC
	f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	TIMER0_pSetCallBack=Copy_pFun;
#endif
}
    2ce2:	26 96       	adiw	r28, 0x06	; 6
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	28 97       	sbiw	r28, 0x08	; 8
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	6d 83       	std	Y+5, r22	; 0x05
    2d0e:	7e 83       	std	Y+6, r23	; 0x06
    2d10:	8f 83       	std	Y+7, r24	; 0x07
    2d12:	98 87       	std	Y+8, r25	; 0x08
#if TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    2d14:	6d 81       	ldd	r22, Y+5	; 0x05
    2d16:	7e 81       	ldd	r23, Y+6	; 0x06
    2d18:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1a:	98 85       	ldd	r25, Y+8	; 0x08
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e8       	ldi	r19, 0x80	; 128
    2d20:	4f ef       	ldi	r20, 0xFF	; 255
    2d22:	53 e4       	ldi	r21, 0x43	; 67
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	48 ec       	ldi	r20, 0xC8	; 200
    2d36:	52 e4       	ldi	r21, 0x42	; 66
    2d38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	ab 83       	std	Y+3, r26	; 0x03
    2d46:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=Copy_u8OCRValue;
    2d48:	0c e5       	ldi	r16, 0x5C	; 92
    2d4a:	10 e0       	ldi	r17, 0x00	; 0
    2d4c:	69 81       	ldd	r22, Y+1	; 0x01
    2d4e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	80 83       	st	Z, r24
#elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	OCR0=Copy_u8OCRValue;
#endif
}
    2d60:	28 96       	adiw	r28, 0x08	; 8
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	08 95       	ret

00002d76 <__vector_11>:
/**********************************************************************************/
void __vector_11 (void)
{
    2d76:	1f 92       	push	r1
    2d78:	0f 92       	push	r0
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	0f 92       	push	r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	2f 93       	push	r18
    2d82:	3f 93       	push	r19
    2d84:	4f 93       	push	r20
    2d86:	5f 93       	push	r21
    2d88:	6f 93       	push	r22
    2d8a:	7f 93       	push	r23
    2d8c:	8f 93       	push	r24
    2d8e:	9f 93       	push	r25
    2d90:	af 93       	push	r26
    2d92:	bf 93       	push	r27
    2d94:	ef 93       	push	r30
    2d96:	ff 93       	push	r31
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    2da0:	80 91 7d 00 	lds	r24, 0x007D
    2da4:	90 91 7e 00 	lds	r25, 0x007E
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	90 93 7e 00 	sts	0x007E, r25
    2dae:	80 93 7d 00 	sts	0x007D, r24
	if(TIMER0_f32OVCounterTmp==Local_u16Counter)
    2db2:	80 91 7d 00 	lds	r24, 0x007D
    2db6:	90 91 7e 00 	lds	r25, 0x007E
    2dba:	9c 01       	movw	r18, r24
    2dbc:	40 e0       	ldi	r20, 0x00	; 0
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	80 91 95 00 	lds	r24, 0x0095
    2dc4:	90 91 96 00 	lds	r25, 0x0096
    2dc8:	a0 91 97 00 	lds	r26, 0x0097
    2dcc:	b0 91 98 00 	lds	r27, 0x0098
    2dd0:	28 17       	cp	r18, r24
    2dd2:	39 07       	cpc	r19, r25
    2dd4:	4a 07       	cpc	r20, r26
    2dd6:	5b 07       	cpc	r21, r27
    2dd8:	a1 f4       	brne	.+40     	; 0x2e02 <__vector_11+0x8c>
	{
		TCNT0=TIMER0_f32PreloodValue;
    2dda:	e2 e5       	ldi	r30, 0x52	; 82
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 91 91 00 	lds	r24, 0x0091
    2de2:	90 91 92 00 	lds	r25, 0x0092
    2de6:	a0 91 93 00 	lds	r26, 0x0093
    2dea:	b0 91 94 00 	lds	r27, 0x0094
    2dee:	80 83       	st	Z, r24
		TIMER0_pSetCallBack();
    2df0:	e0 91 85 00 	lds	r30, 0x0085
    2df4:	f0 91 86 00 	lds	r31, 0x0086
    2df8:	09 95       	icall
		Local_u16Counter=0;
    2dfa:	10 92 7e 00 	sts	0x007E, r1
    2dfe:	10 92 7d 00 	sts	0x007D, r1
	}
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	ff 91       	pop	r31
    2e08:	ef 91       	pop	r30
    2e0a:	bf 91       	pop	r27
    2e0c:	af 91       	pop	r26
    2e0e:	9f 91       	pop	r25
    2e10:	8f 91       	pop	r24
    2e12:	7f 91       	pop	r23
    2e14:	6f 91       	pop	r22
    2e16:	5f 91       	pop	r21
    2e18:	4f 91       	pop	r20
    2e1a:	3f 91       	pop	r19
    2e1c:	2f 91       	pop	r18
    2e1e:	0f 90       	pop	r0
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	0f 90       	pop	r0
    2e24:	1f 90       	pop	r1
    2e26:	18 95       	reti

00002e28 <__vector_10>:
void __vector_10 (void)
{
    2e28:	1f 92       	push	r1
    2e2a:	0f 92       	push	r0
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	0f 92       	push	r0
    2e30:	11 24       	eor	r1, r1
    2e32:	2f 93       	push	r18
    2e34:	3f 93       	push	r19
    2e36:	4f 93       	push	r20
    2e38:	5f 93       	push	r21
    2e3a:	6f 93       	push	r22
    2e3c:	7f 93       	push	r23
    2e3e:	8f 93       	push	r24
    2e40:	9f 93       	push	r25
    2e42:	af 93       	push	r26
    2e44:	bf 93       	push	r27
    2e46:	ef 93       	push	r30
    2e48:	ff 93       	push	r31
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u8Counter=0;
	Local_u8Counter++;
    2e52:	80 91 7f 00 	lds	r24, 0x007F
    2e56:	90 91 80 00 	lds	r25, 0x0080
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	90 93 80 00 	sts	0x0080, r25
    2e60:	80 93 7f 00 	sts	0x007F, r24
	if(TIMER0_f32CounterCTC==Local_u8Counter)
    2e64:	80 91 7f 00 	lds	r24, 0x007F
    2e68:	90 91 80 00 	lds	r25, 0x0080
    2e6c:	9c 01       	movw	r18, r24
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	80 91 a5 00 	lds	r24, 0x00A5
    2e76:	90 91 a6 00 	lds	r25, 0x00A6
    2e7a:	a0 91 a7 00 	lds	r26, 0x00A7
    2e7e:	b0 91 a8 00 	lds	r27, 0x00A8
    2e82:	28 17       	cp	r18, r24
    2e84:	39 07       	cpc	r19, r25
    2e86:	4a 07       	cpc	r20, r26
    2e88:	5b 07       	cpc	r21, r27
    2e8a:	49 f4       	brne	.+18     	; 0x2e9e <__vector_10+0x76>
	{
		Local_u8Counter=0;
    2e8c:	10 92 80 00 	sts	0x0080, r1
    2e90:	10 92 7f 00 	sts	0x007F, r1
		TIMER0_pSetCallBack();
    2e94:	e0 91 85 00 	lds	r30, 0x0085
    2e98:	f0 91 86 00 	lds	r31, 0x0086
    2e9c:	09 95       	icall
	}
}
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	ff 91       	pop	r31
    2ea4:	ef 91       	pop	r30
    2ea6:	bf 91       	pop	r27
    2ea8:	af 91       	pop	r26
    2eaa:	9f 91       	pop	r25
    2eac:	8f 91       	pop	r24
    2eae:	7f 91       	pop	r23
    2eb0:	6f 91       	pop	r22
    2eb2:	5f 91       	pop	r21
    2eb4:	4f 91       	pop	r20
    2eb6:	3f 91       	pop	r19
    2eb8:	2f 91       	pop	r18
    2eba:	0f 90       	pop	r0
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	0f 90       	pop	r0
    2ec0:	1f 90       	pop	r1
    2ec2:	18 95       	reti

00002ec4 <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE2);
	CLR_BIT(TIMSK,TIMSK_OCIE2);

	TCNT2=TIMER2_f32PreloodValue;
#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	SET_BIT(TCCR2,TCCR2_WGM20);
    2ecc:	a5 e4       	ldi	r26, 0x45	; 69
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	e5 e4       	ldi	r30, 0x45	; 69
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	80 64       	ori	r24, 0x40	; 64
    2ed8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM21);
    2eda:	a5 e4       	ldi	r26, 0x45	; 69
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	e5 e4       	ldi	r30, 0x45	; 69
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	87 7f       	andi	r24, 0xF7	; 247
    2ee6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM21);
#elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
	SET_BIT(TCCR2,TCCR2_COM20);
	CLR_BIT(TCCR2,TCCR2_COM21);
#elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
	CLR_BIT(TCCR2,TCCR2_COM20);
    2ee8:	a5 e4       	ldi	r26, 0x45	; 69
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e5 e4       	ldi	r30, 0x45	; 69
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	8f 7e       	andi	r24, 0xEF	; 239
    2ef4:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM21);
    2ef6:	a5 e4       	ldi	r26, 0x45	; 69
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e5 e4       	ldi	r30, 0x45	; 69
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	80 62       	ori	r24, 0x20	; 32
    2f02:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS20);
	CLR_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
	TIMER2_u16Prescaller=256;
#elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
	SET_BIT(TCCR2,TCCR2_CS20);
    2f04:	a5 e4       	ldi	r26, 0x45	; 69
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e5 e4       	ldi	r30, 0x45	; 69
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	81 60       	ori	r24, 0x01	; 1
    2f10:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    2f12:	a5 e4       	ldi	r26, 0x45	; 69
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	e5 e4       	ldi	r30, 0x45	; 69
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	8d 7f       	andi	r24, 0xFD	; 253
    2f1e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS22);
    2f20:	a5 e4       	ldi	r26, 0x45	; 69
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e5 e4       	ldi	r30, 0x45	; 69
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	84 60       	ori	r24, 0x04	; 4
    2f2c:	8c 93       	st	X, r24
	TIMER2_u16Prescaller=1024;
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	a0 e8       	ldi	r26, 0x80	; 128
    2f34:	b4 e4       	ldi	r27, 0x44	; 68
    2f36:	80 93 a1 00 	sts	0x00A1, r24
    2f3a:	90 93 a2 00 	sts	0x00A2, r25
    2f3e:	a0 93 a3 00 	sts	0x00A3, r26
    2f42:	b0 93 a4 00 	sts	0x00A4, r27
	SET_BIT(TCCR2,TCCR2_CS20);
	SET_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
	TIMER2_u16Prescaller=0;
#endif
}
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <TIMER_voidTimer2Delay+0x6>
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <TIMER_voidTimer2Delay+0x8>
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <TIMER_voidTimer2Delay+0xa>
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	69 83       	std	Y+1, r22	; 0x01
    2f5c:	7a 83       	std	Y+2, r23	; 0x02
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
    2f60:	9c 83       	std	Y+4, r25	; 0x04
    2f62:	5e 83       	std	Y+6, r21	; 0x06
    2f64:	4d 83       	std	Y+5, r20	; 0x05
#elif TIMER2_MODE  == TIMER2_MODE_CTC
	f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	TIMER2_pSetCallBack=Copy_pFun;
#endif
}
    2f66:	26 96       	adiw	r28, 0x06	; 6
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	28 97       	sbiw	r28, 0x08	; 8
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	6d 83       	std	Y+5, r22	; 0x05
    2f92:	7e 83       	std	Y+6, r23	; 0x06
    2f94:	8f 83       	std	Y+7, r24	; 0x07
    2f96:	98 87       	std	Y+8, r25	; 0x08
#if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    2f98:	6d 81       	ldd	r22, Y+5	; 0x05
    2f9a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f9e:	98 85       	ldd	r25, Y+8	; 0x08
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e8       	ldi	r19, 0x80	; 128
    2fa4:	4f ef       	ldi	r20, 0xFF	; 255
    2fa6:	53 e4       	ldi	r21, 0x43	; 67
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	48 ec       	ldi	r20, 0xC8	; 200
    2fba:	52 e4       	ldi	r21, 0x42	; 66
    2fbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	9a 83       	std	Y+2, r25	; 0x02
    2fc8:	ab 83       	std	Y+3, r26	; 0x03
    2fca:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=Copy_u8OCRValue;
    2fcc:	03 e4       	ldi	r16, 0x43	; 67
    2fce:	10 e0       	ldi	r17, 0x00	; 0
    2fd0:	69 81       	ldd	r22, Y+1	; 0x01
    2fd2:	7a 81       	ldd	r23, Y+2	; 0x02
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	80 83       	st	Z, r24
#elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	OCR2=Copy_u8OCRValue;
#endif
}
    2fe4:	28 96       	adiw	r28, 0x08	; 8
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	08 95       	ret

00002ffa <__vector_4>:
/**********************************************************************************/
void __vector_4 (void)
{
    2ffa:	1f 92       	push	r1
    2ffc:	0f 92       	push	r0
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	0f 92       	push	r0
    3002:	11 24       	eor	r1, r1
    3004:	2f 93       	push	r18
    3006:	3f 93       	push	r19
    3008:	4f 93       	push	r20
    300a:	5f 93       	push	r21
    300c:	6f 93       	push	r22
    300e:	7f 93       	push	r23
    3010:	8f 93       	push	r24
    3012:	9f 93       	push	r25
    3014:	af 93       	push	r26
    3016:	bf 93       	push	r27
    3018:	ef 93       	push	r30
    301a:	ff 93       	push	r31
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    3024:	80 91 81 00 	lds	r24, 0x0081
    3028:	90 91 82 00 	lds	r25, 0x0082
    302c:	01 96       	adiw	r24, 0x01	; 1
    302e:	90 93 82 00 	sts	0x0082, r25
    3032:	80 93 81 00 	sts	0x0081, r24
	if(TIMER2_f32OVCounter==Local_u16Counter)
    3036:	80 91 81 00 	lds	r24, 0x0081
    303a:	90 91 82 00 	lds	r25, 0x0082
    303e:	9c 01       	movw	r18, r24
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	80 91 9d 00 	lds	r24, 0x009D
    3048:	90 91 9e 00 	lds	r25, 0x009E
    304c:	a0 91 9f 00 	lds	r26, 0x009F
    3050:	b0 91 a0 00 	lds	r27, 0x00A0
    3054:	28 17       	cp	r18, r24
    3056:	39 07       	cpc	r19, r25
    3058:	4a 07       	cpc	r20, r26
    305a:	5b 07       	cpc	r21, r27
    305c:	a1 f4       	brne	.+40     	; 0x3086 <__vector_4+0x8c>
	{
		TCNT2=TIMER2_f32PreloodValue;
    305e:	e4 e4       	ldi	r30, 0x44	; 68
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 91 ad 00 	lds	r24, 0x00AD
    3066:	90 91 ae 00 	lds	r25, 0x00AE
    306a:	a0 91 af 00 	lds	r26, 0x00AF
    306e:	b0 91 b0 00 	lds	r27, 0x00B0
    3072:	80 83       	st	Z, r24
		TIMER2_pSetCallBack();
    3074:	e0 91 89 00 	lds	r30, 0x0089
    3078:	f0 91 8a 00 	lds	r31, 0x008A
    307c:	09 95       	icall
		Local_u16Counter=0;
    307e:	10 92 82 00 	sts	0x0082, r1
    3082:	10 92 81 00 	sts	0x0081, r1
	}
}
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	ff 91       	pop	r31
    308c:	ef 91       	pop	r30
    308e:	bf 91       	pop	r27
    3090:	af 91       	pop	r26
    3092:	9f 91       	pop	r25
    3094:	8f 91       	pop	r24
    3096:	7f 91       	pop	r23
    3098:	6f 91       	pop	r22
    309a:	5f 91       	pop	r21
    309c:	4f 91       	pop	r20
    309e:	3f 91       	pop	r19
    30a0:	2f 91       	pop	r18
    30a2:	0f 90       	pop	r0
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	0f 90       	pop	r0
    30a8:	1f 90       	pop	r1
    30aa:	18 95       	reti

000030ac <__vector_3>:
void __vector_3 (void)
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u8Counter=0;
	Local_u8Counter++;
    30b4:	80 91 83 00 	lds	r24, 0x0083
    30b8:	90 91 84 00 	lds	r25, 0x0084
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	90 93 84 00 	sts	0x0084, r25
    30c2:	80 93 83 00 	sts	0x0083, r24
	if(TIMER2_f32CounterCTC==Local_u8Counter)
    30c6:	80 91 83 00 	lds	r24, 0x0083
    30ca:	90 91 84 00 	lds	r25, 0x0084
    30ce:	9c 01       	movw	r18, r24
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	80 91 a9 00 	lds	r24, 0x00A9
    30d8:	90 91 aa 00 	lds	r25, 0x00AA
    30dc:	a0 91 ab 00 	lds	r26, 0x00AB
    30e0:	b0 91 ac 00 	lds	r27, 0x00AC
    30e4:	28 17       	cp	r18, r24
    30e6:	39 07       	cpc	r19, r25
    30e8:	4a 07       	cpc	r20, r26
    30ea:	5b 07       	cpc	r21, r27
    30ec:	49 f4       	brne	.+18     	; 0x3100 <__vector_3+0x54>
	{
		TIMER2_pSetCallBack();
    30ee:	e0 91 89 00 	lds	r30, 0x0089
    30f2:	f0 91 8a 00 	lds	r31, 0x008A
    30f6:	09 95       	icall
		Local_u8Counter=0;
    30f8:	10 92 84 00 	sts	0x0084, r1
    30fc:	10 92 83 00 	sts	0x0083, r1
	}
}
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <TIMER_voidTimer1Enable>:
 *                                                               Timer 1                                                              *
 **************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	29 97       	sbiw	r28, 0x09	; 9
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	6a 83       	std	Y+2, r22	; 0x02
    311e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Timer1Mode)
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	39 87       	std	Y+9, r19	; 0x09
    3128:	28 87       	std	Y+8, r18	; 0x08
    312a:	88 85       	ldd	r24, Y+8	; 0x08
    312c:	99 85       	ldd	r25, Y+9	; 0x09
    312e:	87 30       	cpi	r24, 0x07	; 7
    3130:	91 05       	cpc	r25, r1
    3132:	09 f4       	brne	.+2      	; 0x3136 <TIMER_voidTimer1Enable+0x30>
    3134:	6b c1       	rjmp	.+726    	; 0x340c <TIMER_voidTimer1Enable+0x306>
    3136:	28 85       	ldd	r18, Y+8	; 0x08
    3138:	39 85       	ldd	r19, Y+9	; 0x09
    313a:	28 30       	cpi	r18, 0x08	; 8
    313c:	31 05       	cpc	r19, r1
    313e:	4c f5       	brge	.+82     	; 0x3192 <TIMER_voidTimer1Enable+0x8c>
    3140:	88 85       	ldd	r24, Y+8	; 0x08
    3142:	99 85       	ldd	r25, Y+9	; 0x09
    3144:	83 30       	cpi	r24, 0x03	; 3
    3146:	91 05       	cpc	r25, r1
    3148:	09 f4       	brne	.+2      	; 0x314c <TIMER_voidTimer1Enable+0x46>
    314a:	c7 c0       	rjmp	.+398    	; 0x32da <TIMER_voidTimer1Enable+0x1d4>
    314c:	28 85       	ldd	r18, Y+8	; 0x08
    314e:	39 85       	ldd	r19, Y+9	; 0x09
    3150:	24 30       	cpi	r18, 0x04	; 4
    3152:	31 05       	cpc	r19, r1
    3154:	8c f4       	brge	.+34     	; 0x3178 <TIMER_voidTimer1Enable+0x72>
    3156:	88 85       	ldd	r24, Y+8	; 0x08
    3158:	99 85       	ldd	r25, Y+9	; 0x09
    315a:	81 30       	cpi	r24, 0x01	; 1
    315c:	91 05       	cpc	r25, r1
    315e:	09 f4       	brne	.+2      	; 0x3162 <TIMER_voidTimer1Enable+0x5c>
    3160:	7c c0       	rjmp	.+248    	; 0x325a <TIMER_voidTimer1Enable+0x154>
    3162:	28 85       	ldd	r18, Y+8	; 0x08
    3164:	39 85       	ldd	r19, Y+9	; 0x09
    3166:	22 30       	cpi	r18, 0x02	; 2
    3168:	31 05       	cpc	r19, r1
    316a:	0c f0       	brlt	.+2      	; 0x316e <TIMER_voidTimer1Enable+0x68>
    316c:	96 c0       	rjmp	.+300    	; 0x329a <TIMER_voidTimer1Enable+0x194>
    316e:	88 85       	ldd	r24, Y+8	; 0x08
    3170:	99 85       	ldd	r25, Y+9	; 0x09
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	c9 f1       	breq	.+114    	; 0x31e8 <TIMER_voidTimer1Enable+0xe2>
    3176:	50 c2       	rjmp	.+1184   	; 0x3618 <TIMER_voidTimer1Enable+0x512>
    3178:	28 85       	ldd	r18, Y+8	; 0x08
    317a:	39 85       	ldd	r19, Y+9	; 0x09
    317c:	25 30       	cpi	r18, 0x05	; 5
    317e:	31 05       	cpc	r19, r1
    3180:	09 f4       	brne	.+2      	; 0x3184 <TIMER_voidTimer1Enable+0x7e>
    3182:	04 c1       	rjmp	.+520    	; 0x338c <TIMER_voidTimer1Enable+0x286>
    3184:	88 85       	ldd	r24, Y+8	; 0x08
    3186:	99 85       	ldd	r25, Y+9	; 0x09
    3188:	86 30       	cpi	r24, 0x06	; 6
    318a:	91 05       	cpc	r25, r1
    318c:	0c f0       	brlt	.+2      	; 0x3190 <TIMER_voidTimer1Enable+0x8a>
    318e:	1e c1       	rjmp	.+572    	; 0x33cc <TIMER_voidTimer1Enable+0x2c6>
    3190:	c4 c0       	rjmp	.+392    	; 0x331a <TIMER_voidTimer1Enable+0x214>
    3192:	28 85       	ldd	r18, Y+8	; 0x08
    3194:	39 85       	ldd	r19, Y+9	; 0x09
    3196:	2b 30       	cpi	r18, 0x0B	; 11
    3198:	31 05       	cpc	r19, r1
    319a:	09 f4       	brne	.+2      	; 0x319e <TIMER_voidTimer1Enable+0x98>
    319c:	ae c1       	rjmp	.+860    	; 0x34fa <TIMER_voidTimer1Enable+0x3f4>
    319e:	88 85       	ldd	r24, Y+8	; 0x08
    31a0:	99 85       	ldd	r25, Y+9	; 0x09
    31a2:	8c 30       	cpi	r24, 0x0C	; 12
    31a4:	91 05       	cpc	r25, r1
    31a6:	6c f4       	brge	.+26     	; 0x31c2 <TIMER_voidTimer1Enable+0xbc>
    31a8:	28 85       	ldd	r18, Y+8	; 0x08
    31aa:	39 85       	ldd	r19, Y+9	; 0x09
    31ac:	29 30       	cpi	r18, 0x09	; 9
    31ae:	31 05       	cpc	r19, r1
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <TIMER_voidTimer1Enable+0xae>
    31b2:	69 c1       	rjmp	.+722    	; 0x3486 <TIMER_voidTimer1Enable+0x380>
    31b4:	88 85       	ldd	r24, Y+8	; 0x08
    31b6:	99 85       	ldd	r25, Y+9	; 0x09
    31b8:	8a 30       	cpi	r24, 0x0A	; 10
    31ba:	91 05       	cpc	r25, r1
    31bc:	0c f0       	brlt	.+2      	; 0x31c0 <TIMER_voidTimer1Enable+0xba>
    31be:	80 c1       	rjmp	.+768    	; 0x34c0 <TIMER_voidTimer1Enable+0x3ba>
    31c0:	45 c1       	rjmp	.+650    	; 0x344c <TIMER_voidTimer1Enable+0x346>
    31c2:	28 85       	ldd	r18, Y+8	; 0x08
    31c4:	39 85       	ldd	r19, Y+9	; 0x09
    31c6:	2e 30       	cpi	r18, 0x0E	; 14
    31c8:	31 05       	cpc	r19, r1
    31ca:	09 f4       	brne	.+2      	; 0x31ce <TIMER_voidTimer1Enable+0xc8>
    31cc:	ec c1       	rjmp	.+984    	; 0x35a6 <TIMER_voidTimer1Enable+0x4a0>
    31ce:	88 85       	ldd	r24, Y+8	; 0x08
    31d0:	99 85       	ldd	r25, Y+9	; 0x09
    31d2:	8f 30       	cpi	r24, 0x0F	; 15
    31d4:	91 05       	cpc	r25, r1
    31d6:	09 f4       	brne	.+2      	; 0x31da <TIMER_voidTimer1Enable+0xd4>
    31d8:	03 c2       	rjmp	.+1030   	; 0x35e0 <TIMER_voidTimer1Enable+0x4da>
    31da:	28 85       	ldd	r18, Y+8	; 0x08
    31dc:	39 85       	ldd	r19, Y+9	; 0x09
    31de:	2c 30       	cpi	r18, 0x0C	; 12
    31e0:	31 05       	cpc	r19, r1
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <TIMER_voidTimer1Enable+0xe0>
    31e4:	a7 c1       	rjmp	.+846    	; 0x3534 <TIMER_voidTimer1Enable+0x42e>
    31e6:	18 c2       	rjmp	.+1072   	; 0x3618 <TIMER_voidTimer1Enable+0x512>
	{
	case  TIMER1_MODE_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    31e8:	af e4       	ldi	r26, 0x4F	; 79
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	ef e4       	ldi	r30, 0x4F	; 79
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	8e 7f       	andi	r24, 0xFE	; 254
    31f4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    31f6:	af e4       	ldi	r26, 0x4F	; 79
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	ef e4       	ldi	r30, 0x4F	; 79
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	8d 7f       	andi	r24, 0xFD	; 253
    3202:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3204:	ae e4       	ldi	r26, 0x4E	; 78
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	ee e4       	ldi	r30, 0x4E	; 78
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	87 7f       	andi	r24, 0xF7	; 247
    3210:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3212:	ae e4       	ldi	r26, 0x4E	; 78
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	ee e4       	ldi	r30, 0x4E	; 78
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	8f 7e       	andi	r24, 0xEF	; 239
    321e:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_TOIE1);
    3220:	a9 e5       	ldi	r26, 0x59	; 89
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e9 e5       	ldi	r30, 0x59	; 89
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	84 60       	ori	r24, 0x04	; 4
    322c:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    322e:	a9 e5       	ldi	r26, 0x59	; 89
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e9 e5       	ldi	r30, 0x59	; 89
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	87 7f       	andi	r24, 0xF7	; 247
    323a:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1A);
    323c:	a9 e5       	ldi	r26, 0x59	; 89
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e9 e5       	ldi	r30, 0x59	; 89
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	8f 7e       	andi	r24, 0xEF	; 239
    3248:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    324a:	a9 e5       	ldi	r26, 0x59	; 89
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	e9 e5       	ldi	r30, 0x59	; 89
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	8f 7d       	andi	r24, 0xDF	; 223
    3256:	8c 93       	st	X, r24
    3258:	df c1       	rjmp	.+958    	; 0x3618 <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1=TIMER_f32Timer1PreloodValue;
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    325a:	af e4       	ldi	r26, 0x4F	; 79
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	ef e4       	ldi	r30, 0x4F	; 79
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	81 60       	ori	r24, 0x01	; 1
    3266:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3268:	af e4       	ldi	r26, 0x4F	; 79
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	ef e4       	ldi	r30, 0x4F	; 79
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	8d 7f       	andi	r24, 0xFD	; 253
    3274:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3276:	ae e4       	ldi	r26, 0x4E	; 78
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	ee e4       	ldi	r30, 0x4E	; 78
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	87 7f       	andi	r24, 0xF7	; 247
    3282:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3284:	ae e4       	ldi	r26, 0x4E	; 78
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	ee e4       	ldi	r30, 0x4E	; 78
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	8f 7e       	andi	r24, 0xEF	; 239
    3290:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	80 93 90 00 	sts	0x0090, r24
    3298:	bf c1       	rjmp	.+894    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    329a:	af e4       	ldi	r26, 0x4F	; 79
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	ef e4       	ldi	r30, 0x4F	; 79
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	8e 7f       	andi	r24, 0xFE	; 254
    32a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    32a8:	af e4       	ldi	r26, 0x4F	; 79
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	ef e4       	ldi	r30, 0x4F	; 79
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	82 60       	ori	r24, 0x02	; 2
    32b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    32b6:	ae e4       	ldi	r26, 0x4E	; 78
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	ee e4       	ldi	r30, 0x4E	; 78
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 81       	ld	r24, Z
    32c0:	87 7f       	andi	r24, 0xF7	; 247
    32c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    32c4:	ae e4       	ldi	r26, 0x4E	; 78
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	ee e4       	ldi	r30, 0x4E	; 78
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	8f 7e       	andi	r24, 0xEF	; 239
    32d0:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9;
    32d2:	82 e0       	ldi	r24, 0x02	; 2
    32d4:	80 93 90 00 	sts	0x0090, r24
    32d8:	9f c1       	rjmp	.+830    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    32da:	af e4       	ldi	r26, 0x4F	; 79
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	ef e4       	ldi	r30, 0x4F	; 79
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	81 60       	ori	r24, 0x01	; 1
    32e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    32e8:	af e4       	ldi	r26, 0x4F	; 79
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	ef e4       	ldi	r30, 0x4F	; 79
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	82 60       	ori	r24, 0x02	; 2
    32f4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    32f6:	ae e4       	ldi	r26, 0x4E	; 78
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	ee e4       	ldi	r30, 0x4E	; 78
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	87 7f       	andi	r24, 0xF7	; 247
    3302:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3304:	ae e4       	ldi	r26, 0x4E	; 78
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	ee e4       	ldi	r30, 0x4E	; 78
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	8f 7e       	andi	r24, 0xEF	; 239
    3310:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10;
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	80 93 90 00 	sts	0x0090, r24
    3318:	7f c1       	rjmp	.+766    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_CTC_OCR1A :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    331a:	af e4       	ldi	r26, 0x4F	; 79
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	ef e4       	ldi	r30, 0x4F	; 79
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	8e 7f       	andi	r24, 0xFE	; 254
    3326:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3328:	af e4       	ldi	r26, 0x4F	; 79
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	ef e4       	ldi	r30, 0x4F	; 79
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	8d 7f       	andi	r24, 0xFD	; 253
    3334:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3336:	ae e4       	ldi	r26, 0x4E	; 78
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	ee e4       	ldi	r30, 0x4E	; 78
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	88 60       	ori	r24, 0x08	; 8
    3342:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3344:	ae e4       	ldi	r26, 0x4E	; 78
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	ee e4       	ldi	r30, 0x4E	; 78
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	8f 7e       	andi	r24, 0xEF	; 239
    3350:	8c 93       	st	X, r24

		CLR_BIT(TIMSK,TIMSK_TOIE1);
    3352:	a9 e5       	ldi	r26, 0x59	; 89
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	e9 e5       	ldi	r30, 0x59	; 89
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	8b 7f       	andi	r24, 0xFB	; 251
    335e:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    3360:	a9 e5       	ldi	r26, 0x59	; 89
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e9 e5       	ldi	r30, 0x59	; 89
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	87 7f       	andi	r24, 0xF7	; 247
    336c:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    336e:	a9 e5       	ldi	r26, 0x59	; 89
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e9 e5       	ldi	r30, 0x59	; 89
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	80 61       	ori	r24, 0x10	; 16
    337a:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    337c:	a9 e5       	ldi	r26, 0x59	; 89
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	e9 e5       	ldi	r30, 0x59	; 89
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	8f 7d       	andi	r24, 0xDF	; 223
    3388:	8c 93       	st	X, r24
    338a:	46 c1       	rjmp	.+652    	; 0x3618 <TIMER_voidTimer1Enable+0x512>

		break;
	case TIMER1_MODE_FAST_PWM_8 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    338c:	af e4       	ldi	r26, 0x4F	; 79
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	ef e4       	ldi	r30, 0x4F	; 79
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	81 60       	ori	r24, 0x01	; 1
    3398:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    339a:	af e4       	ldi	r26, 0x4F	; 79
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	ef e4       	ldi	r30, 0x4F	; 79
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	8d 7f       	andi	r24, 0xFD	; 253
    33a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    33a8:	ae e4       	ldi	r26, 0x4E	; 78
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	ee e4       	ldi	r30, 0x4E	; 78
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
    33b2:	88 60       	ori	r24, 0x08	; 8
    33b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    33b6:	ae e4       	ldi	r26, 0x4E	; 78
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	ee e4       	ldi	r30, 0x4E	; 78
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	80 81       	ld	r24, Z
    33c0:	8f 7e       	andi	r24, 0xEF	; 239
    33c2:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8;
    33c4:	85 e0       	ldi	r24, 0x05	; 5
    33c6:	80 93 90 00 	sts	0x0090, r24
    33ca:	26 c1       	rjmp	.+588    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    33cc:	af e4       	ldi	r26, 0x4F	; 79
    33ce:	b0 e0       	ldi	r27, 0x00	; 0
    33d0:	ef e4       	ldi	r30, 0x4F	; 79
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	80 81       	ld	r24, Z
    33d6:	8e 7f       	andi	r24, 0xFE	; 254
    33d8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    33da:	af e4       	ldi	r26, 0x4F	; 79
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	ef e4       	ldi	r30, 0x4F	; 79
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	82 60       	ori	r24, 0x02	; 2
    33e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    33e8:	ae e4       	ldi	r26, 0x4E	; 78
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	ee e4       	ldi	r30, 0x4E	; 78
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	88 60       	ori	r24, 0x08	; 8
    33f4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    33f6:	ae e4       	ldi	r26, 0x4E	; 78
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	ee e4       	ldi	r30, 0x4E	; 78
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	8f 7e       	andi	r24, 0xEF	; 239
    3402:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9;
    3404:	86 e0       	ldi	r24, 0x06	; 6
    3406:	80 93 90 00 	sts	0x0090, r24
    340a:	06 c1       	rjmp	.+524    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    340c:	af e4       	ldi	r26, 0x4F	; 79
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	ef e4       	ldi	r30, 0x4F	; 79
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	81 60       	ori	r24, 0x01	; 1
    3418:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    341a:	af e4       	ldi	r26, 0x4F	; 79
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	ef e4       	ldi	r30, 0x4F	; 79
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	82 60       	ori	r24, 0x02	; 2
    3426:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3428:	ae e4       	ldi	r26, 0x4E	; 78
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	ee e4       	ldi	r30, 0x4E	; 78
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	88 60       	ori	r24, 0x08	; 8
    3434:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3436:	ae e4       	ldi	r26, 0x4E	; 78
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	ee e4       	ldi	r30, 0x4E	; 78
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	8f 7e       	andi	r24, 0xEF	; 239
    3442:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10;
    3444:	87 e0       	ldi	r24, 0x07	; 7
    3446:	80 93 90 00 	sts	0x0090, r24
    344a:	e6 c0       	rjmp	.+460    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    344c:	af e4       	ldi	r26, 0x4F	; 79
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	ef e4       	ldi	r30, 0x4F	; 79
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	8e 7f       	andi	r24, 0xFE	; 254
    3458:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    345a:	af e4       	ldi	r26, 0x4F	; 79
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	ef e4       	ldi	r30, 0x4F	; 79
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	80 81       	ld	r24, Z
    3464:	8d 7f       	andi	r24, 0xFD	; 253
    3466:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3468:	ae e4       	ldi	r26, 0x4E	; 78
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	ee e4       	ldi	r30, 0x4E	; 78
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	87 7f       	andi	r24, 0xF7	; 247
    3474:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3476:	ae e4       	ldi	r26, 0x4E	; 78
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	ee e4       	ldi	r30, 0x4E	; 78
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	80 61       	ori	r24, 0x10	; 16
    3482:	8c 93       	st	X, r24
    3484:	c9 c0       	rjmp	.+402    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3486:	af e4       	ldi	r26, 0x4F	; 79
    3488:	b0 e0       	ldi	r27, 0x00	; 0
    348a:	ef e4       	ldi	r30, 0x4F	; 79
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	80 81       	ld	r24, Z
    3490:	81 60       	ori	r24, 0x01	; 1
    3492:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3494:	af e4       	ldi	r26, 0x4F	; 79
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	ef e4       	ldi	r30, 0x4F	; 79
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	80 81       	ld	r24, Z
    349e:	8d 7f       	andi	r24, 0xFD	; 253
    34a0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    34a2:	ae e4       	ldi	r26, 0x4E	; 78
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	ee e4       	ldi	r30, 0x4E	; 78
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	87 7f       	andi	r24, 0xF7	; 247
    34ae:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    34b0:	ae e4       	ldi	r26, 0x4E	; 78
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	ee e4       	ldi	r30, 0x4E	; 78
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	80 61       	ori	r24, 0x10	; 16
    34bc:	8c 93       	st	X, r24
    34be:	ac c0       	rjmp	.+344    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_PWM_PHASE_CORRECT_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    34c0:	af e4       	ldi	r26, 0x4F	; 79
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	ef e4       	ldi	r30, 0x4F	; 79
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	8e 7f       	andi	r24, 0xFE	; 254
    34cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    34ce:	af e4       	ldi	r26, 0x4F	; 79
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	ef e4       	ldi	r30, 0x4F	; 79
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	82 60       	ori	r24, 0x02	; 2
    34da:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    34dc:	ae e4       	ldi	r26, 0x4E	; 78
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	ee e4       	ldi	r30, 0x4E	; 78
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	87 7f       	andi	r24, 0xF7	; 247
    34e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    34ea:	ae e4       	ldi	r26, 0x4E	; 78
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	ee e4       	ldi	r30, 0x4E	; 78
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	80 61       	ori	r24, 0x10	; 16
    34f6:	8c 93       	st	X, r24
    34f8:	8f c0       	rjmp	.+286    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_PWM_PHASE_CORRECT_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    34fa:	af e4       	ldi	r26, 0x4F	; 79
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	ef e4       	ldi	r30, 0x4F	; 79
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	81 60       	ori	r24, 0x01	; 1
    3506:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3508:	af e4       	ldi	r26, 0x4F	; 79
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	ef e4       	ldi	r30, 0x4F	; 79
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	80 81       	ld	r24, Z
    3512:	82 60       	ori	r24, 0x02	; 2
    3514:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3516:	ae e4       	ldi	r26, 0x4E	; 78
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	ee e4       	ldi	r30, 0x4E	; 78
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	87 7f       	andi	r24, 0xF7	; 247
    3522:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3524:	ae e4       	ldi	r26, 0x4E	; 78
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	ee e4       	ldi	r30, 0x4E	; 78
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	80 61       	ori	r24, 0x10	; 16
    3530:	8c 93       	st	X, r24
    3532:	72 c0       	rjmp	.+228    	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_CTC_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3534:	af e4       	ldi	r26, 0x4F	; 79
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	ef e4       	ldi	r30, 0x4F	; 79
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	8e 7f       	andi	r24, 0xFE	; 254
    3540:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3542:	af e4       	ldi	r26, 0x4F	; 79
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	ef e4       	ldi	r30, 0x4F	; 79
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	82 60       	ori	r24, 0x02	; 2
    354e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3550:	ae e4       	ldi	r26, 0x4E	; 78
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	ee e4       	ldi	r30, 0x4E	; 78
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	88 60       	ori	r24, 0x08	; 8
    355c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    355e:	ae e4       	ldi	r26, 0x4E	; 78
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	ee e4       	ldi	r30, 0x4E	; 78
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	8f 7e       	andi	r24, 0xEF	; 239
    356a:	8c 93       	st	X, r24

		CLR_BIT(TIMSK,TIMSK_TOIE1);
    356c:	a9 e5       	ldi	r26, 0x59	; 89
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	e9 e5       	ldi	r30, 0x59	; 89
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	8b 7f       	andi	r24, 0xFB	; 251
    3578:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1B);
    357a:	a9 e5       	ldi	r26, 0x59	; 89
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	e9 e5       	ldi	r30, 0x59	; 89
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	88 60       	ori	r24, 0x08	; 8
    3586:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    3588:	a9 e5       	ldi	r26, 0x59	; 89
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	e9 e5       	ldi	r30, 0x59	; 89
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	80 61       	ori	r24, 0x10	; 16
    3594:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    3596:	a9 e5       	ldi	r26, 0x59	; 89
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	e9 e5       	ldi	r30, 0x59	; 89
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	8f 7d       	andi	r24, 0xDF	; 223
    35a2:	8c 93       	st	X, r24
    35a4:	39 c0       	rjmp	.+114    	; 0x3618 <TIMER_voidTimer1Enable+0x512>

		break;
	case  TIMER1_MODE_FAST_PWM_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    35a6:	af e4       	ldi	r26, 0x4F	; 79
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	ef e4       	ldi	r30, 0x4F	; 79
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	8e 7f       	andi	r24, 0xFE	; 254
    35b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    35b4:	af e4       	ldi	r26, 0x4F	; 79
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	ef e4       	ldi	r30, 0x4F	; 79
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	82 60       	ori	r24, 0x02	; 2
    35c0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    35c2:	ae e4       	ldi	r26, 0x4E	; 78
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	ee e4       	ldi	r30, 0x4E	; 78
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	88 60       	ori	r24, 0x08	; 8
    35ce:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    35d0:	ae e4       	ldi	r26, 0x4E	; 78
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	ee e4       	ldi	r30, 0x4E	; 78
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	80 61       	ori	r24, 0x10	; 16
    35dc:	8c 93       	st	X, r24
    35de:	1c c0       	rjmp	.+56     	; 0x3618 <TIMER_voidTimer1Enable+0x512>
		break;
	case  TIMER1_MODE_FAST_PWM_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    35e0:	af e4       	ldi	r26, 0x4F	; 79
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	ef e4       	ldi	r30, 0x4F	; 79
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	81 60       	ori	r24, 0x01	; 1
    35ec:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    35ee:	af e4       	ldi	r26, 0x4F	; 79
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	ef e4       	ldi	r30, 0x4F	; 79
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	82 60       	ori	r24, 0x02	; 2
    35fa:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    35fc:	ae e4       	ldi	r26, 0x4E	; 78
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	ee e4       	ldi	r30, 0x4E	; 78
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	88 60       	ori	r24, 0x08	; 8
    3608:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    360a:	ae e4       	ldi	r26, 0x4E	; 78
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	ee e4       	ldi	r30, 0x4E	; 78
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	80 61       	ori	r24, 0x10	; 16
    3616:	8c 93       	st	X, r24
		break;
	}
	/***********************************************************************************************************/
	switch(Copy_u8Timer1ModeChannelA)
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	3f 83       	std	Y+7, r19	; 0x07
    3620:	2e 83       	std	Y+6, r18	; 0x06
    3622:	8e 81       	ldd	r24, Y+6	; 0x06
    3624:	9f 81       	ldd	r25, Y+7	; 0x07
    3626:	81 30       	cpi	r24, 0x01	; 1
    3628:	91 05       	cpc	r25, r1
    362a:	21 f1       	breq	.+72     	; 0x3674 <TIMER_voidTimer1Enable+0x56e>
    362c:	2e 81       	ldd	r18, Y+6	; 0x06
    362e:	3f 81       	ldd	r19, Y+7	; 0x07
    3630:	22 30       	cpi	r18, 0x02	; 2
    3632:	31 05       	cpc	r19, r1
    3634:	2c f4       	brge	.+10     	; 0x3640 <TIMER_voidTimer1Enable+0x53a>
    3636:	8e 81       	ldd	r24, Y+6	; 0x06
    3638:	9f 81       	ldd	r25, Y+7	; 0x07
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	61 f0       	breq	.+24     	; 0x3656 <TIMER_voidTimer1Enable+0x550>
    363e:	46 c0       	rjmp	.+140    	; 0x36cc <TIMER_voidTimer1Enable+0x5c6>
    3640:	2e 81       	ldd	r18, Y+6	; 0x06
    3642:	3f 81       	ldd	r19, Y+7	; 0x07
    3644:	22 30       	cpi	r18, 0x02	; 2
    3646:	31 05       	cpc	r19, r1
    3648:	21 f1       	breq	.+72     	; 0x3692 <TIMER_voidTimer1Enable+0x58c>
    364a:	8e 81       	ldd	r24, Y+6	; 0x06
    364c:	9f 81       	ldd	r25, Y+7	; 0x07
    364e:	83 30       	cpi	r24, 0x03	; 3
    3650:	91 05       	cpc	r25, r1
    3652:	71 f1       	breq	.+92     	; 0x36b0 <TIMER_voidTimer1Enable+0x5aa>
    3654:	3b c0       	rjmp	.+118    	; 0x36cc <TIMER_voidTimer1Enable+0x5c6>
	{
	case   TIMER1_MODE_CHANNEL_A_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3656:	af e4       	ldi	r26, 0x4F	; 79
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	ef e4       	ldi	r30, 0x4F	; 79
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	80 81       	ld	r24, Z
    3660:	8f 7b       	andi	r24, 0xBF	; 191
    3662:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3664:	af e4       	ldi	r26, 0x4F	; 79
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	ef e4       	ldi	r30, 0x4F	; 79
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	8f 77       	andi	r24, 0x7F	; 127
    3670:	8c 93       	st	X, r24
    3672:	2c c0       	rjmp	.+88     	; 0x36cc <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_TOGGLE :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3674:	af e4       	ldi	r26, 0x4F	; 79
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	ef e4       	ldi	r30, 0x4F	; 79
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	80 64       	ori	r24, 0x40	; 64
    3680:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3682:	af e4       	ldi	r26, 0x4F	; 79
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	ef e4       	ldi	r30, 0x4F	; 79
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	8f 77       	andi	r24, 0x7F	; 127
    368e:	8c 93       	st	X, r24
    3690:	1d c0       	rjmp	.+58     	; 0x36cc <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3692:	af e4       	ldi	r26, 0x4F	; 79
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	ef e4       	ldi	r30, 0x4F	; 79
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	8f 7b       	andi	r24, 0xBF	; 191
    369e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    36a0:	af e4       	ldi	r26, 0x4F	; 79
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	ef e4       	ldi	r30, 0x4F	; 79
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	80 68       	ori	r24, 0x80	; 128
    36ac:	8c 93       	st	X, r24
    36ae:	0e c0       	rjmp	.+28     	; 0x36cc <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    36b0:	af e4       	ldi	r26, 0x4F	; 79
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	ef e4       	ldi	r30, 0x4F	; 79
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	80 64       	ori	r24, 0x40	; 64
    36bc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    36be:	af e4       	ldi	r26, 0x4F	; 79
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	ef e4       	ldi	r30, 0x4F	; 79
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	80 68       	ori	r24, 0x80	; 128
    36ca:	8c 93       	st	X, r24
		break;
	}
	/***********************************************************************************************************/
	switch(Copy_u8Timer1ModeChannelB)
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	28 2f       	mov	r18, r24
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	3d 83       	std	Y+5, r19	; 0x05
    36d4:	2c 83       	std	Y+4, r18	; 0x04
    36d6:	8c 81       	ldd	r24, Y+4	; 0x04
    36d8:	9d 81       	ldd	r25, Y+5	; 0x05
    36da:	81 30       	cpi	r24, 0x01	; 1
    36dc:	91 05       	cpc	r25, r1
    36de:	21 f1       	breq	.+72     	; 0x3728 <TIMER_voidTimer1Enable+0x622>
    36e0:	2c 81       	ldd	r18, Y+4	; 0x04
    36e2:	3d 81       	ldd	r19, Y+5	; 0x05
    36e4:	22 30       	cpi	r18, 0x02	; 2
    36e6:	31 05       	cpc	r19, r1
    36e8:	2c f4       	brge	.+10     	; 0x36f4 <TIMER_voidTimer1Enable+0x5ee>
    36ea:	8c 81       	ldd	r24, Y+4	; 0x04
    36ec:	9d 81       	ldd	r25, Y+5	; 0x05
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	61 f0       	breq	.+24     	; 0x370a <TIMER_voidTimer1Enable+0x604>
    36f2:	46 c0       	rjmp	.+140    	; 0x3780 <TIMER_voidTimer1Enable+0x67a>
    36f4:	2c 81       	ldd	r18, Y+4	; 0x04
    36f6:	3d 81       	ldd	r19, Y+5	; 0x05
    36f8:	22 30       	cpi	r18, 0x02	; 2
    36fa:	31 05       	cpc	r19, r1
    36fc:	21 f1       	breq	.+72     	; 0x3746 <TIMER_voidTimer1Enable+0x640>
    36fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3700:	9d 81       	ldd	r25, Y+5	; 0x05
    3702:	83 30       	cpi	r24, 0x03	; 3
    3704:	91 05       	cpc	r25, r1
    3706:	71 f1       	breq	.+92     	; 0x3764 <TIMER_voidTimer1Enable+0x65e>
    3708:	3b c0       	rjmp	.+118    	; 0x3780 <TIMER_voidTimer1Enable+0x67a>
	{
	case  TIMER1_MODE_CHANNEL_B_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    370a:	af e4       	ldi	r26, 0x4F	; 79
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	ef e4       	ldi	r30, 0x4F	; 79
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	80 81       	ld	r24, Z
    3714:	8f 7e       	andi	r24, 0xEF	; 239
    3716:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3718:	af e4       	ldi	r26, 0x4F	; 79
    371a:	b0 e0       	ldi	r27, 0x00	; 0
    371c:	ef e4       	ldi	r30, 0x4F	; 79
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	80 81       	ld	r24, Z
    3722:	8f 7d       	andi	r24, 0xDF	; 223
    3724:	8c 93       	st	X, r24
    3726:	2c c0       	rjmp	.+88     	; 0x3780 <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_TOGGLE :
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3728:	af e4       	ldi	r26, 0x4F	; 79
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	ef e4       	ldi	r30, 0x4F	; 79
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 81       	ld	r24, Z
    3732:	80 61       	ori	r24, 0x10	; 16
    3734:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3736:	af e4       	ldi	r26, 0x4F	; 79
    3738:	b0 e0       	ldi	r27, 0x00	; 0
    373a:	ef e4       	ldi	r30, 0x4F	; 79
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 81       	ld	r24, Z
    3740:	8f 7d       	andi	r24, 0xDF	; 223
    3742:	8c 93       	st	X, r24
    3744:	1d c0       	rjmp	.+58     	; 0x3780 <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3746:	af e4       	ldi	r26, 0x4F	; 79
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	ef e4       	ldi	r30, 0x4F	; 79
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	8f 7e       	andi	r24, 0xEF	; 239
    3752:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3754:	af e4       	ldi	r26, 0x4F	; 79
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	ef e4       	ldi	r30, 0x4F	; 79
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	80 62       	ori	r24, 0x20	; 32
    3760:	8c 93       	st	X, r24
    3762:	0e c0       	rjmp	.+28     	; 0x3780 <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3764:	af e4       	ldi	r26, 0x4F	; 79
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	ef e4       	ldi	r30, 0x4F	; 79
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	80 61       	ori	r24, 0x10	; 16
    3770:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3772:	af e4       	ldi	r26, 0x4F	; 79
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	ef e4       	ldi	r30, 0x4F	; 79
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	80 62       	ori	r24, 0x20	; 32
    377e:	8c 93       	st	X, r24
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_256
	CLR_BIT(TCCR1B,TCCR1B_CS10);
	CLR_BIT(TCCR1B,TCCR1B_CS11);
	SET_BIT(TCCR1B,TCCR1B_CS12);
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_1024
	SET_BIT(TCCR1B,TCCR1B_CS10);
    3780:	ae e4       	ldi	r26, 0x4E	; 78
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	ee e4       	ldi	r30, 0x4E	; 78
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	81 60       	ori	r24, 0x01	; 1
    378c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    378e:	ae e4       	ldi	r26, 0x4E	; 78
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	ee e4       	ldi	r30, 0x4E	; 78
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	8d 7f       	andi	r24, 0xFD	; 253
    379a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS12);
    379c:	ae e4       	ldi	r26, 0x4E	; 78
    379e:	b0 e0       	ldi	r27, 0x00	; 0
    37a0:	ee e4       	ldi	r30, 0x4E	; 78
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 81       	ld	r24, Z
    37a6:	84 60       	ori	r24, 0x04	; 4
    37a8:	8c 93       	st	X, r24
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
	SET_BIT(TCCR1B,TCCR1B_CS10);
	SET_BIT(TCCR1B,TCCR1B_CS11);
	SET_BIT(TCCR1B,TCCR1B_CS12);
#endif
}
    37aa:	29 96       	adiw	r28, 0x09	; 9
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	cf 91       	pop	r28
    37b8:	df 91       	pop	r29
    37ba:	08 95       	ret

000037bc <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    37bc:	df 93       	push	r29
    37be:	cf 93       	push	r28
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    37c4:	0f 92       	push	r0
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    37cc:	80 91 90 00 	lds	r24, 0x0090
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	3d 83       	std	Y+5, r19	; 0x05
    37d6:	2c 83       	std	Y+4, r18	; 0x04
    37d8:	4c 81       	ldd	r20, Y+4	; 0x04
    37da:	5d 81       	ldd	r21, Y+5	; 0x05
    37dc:	43 30       	cpi	r20, 0x03	; 3
    37de:	51 05       	cpc	r21, r1
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    37e2:	5b c0       	rjmp	.+182    	; 0x389a <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    37e4:	8c 81       	ldd	r24, Y+4	; 0x04
    37e6:	9d 81       	ldd	r25, Y+5	; 0x05
    37e8:	84 30       	cpi	r24, 0x04	; 4
    37ea:	91 05       	cpc	r25, r1
    37ec:	5c f4       	brge	.+22     	; 0x3804 <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    37ee:	2c 81       	ldd	r18, Y+4	; 0x04
    37f0:	3d 81       	ldd	r19, Y+5	; 0x05
    37f2:	21 30       	cpi	r18, 0x01	; 1
    37f4:	31 05       	cpc	r19, r1
    37f6:	c9 f0       	breq	.+50     	; 0x382a <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    37f8:	4c 81       	ldd	r20, Y+4	; 0x04
    37fa:	5d 81       	ldd	r21, Y+5	; 0x05
    37fc:	42 30       	cpi	r20, 0x02	; 2
    37fe:	51 05       	cpc	r21, r1
    3800:	81 f1       	breq	.+96     	; 0x3862 <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    3802:	ab c0       	rjmp	.+342    	; 0x395a <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    3804:	8c 81       	ldd	r24, Y+4	; 0x04
    3806:	9d 81       	ldd	r25, Y+5	; 0x05
    3808:	86 30       	cpi	r24, 0x06	; 6
    380a:	91 05       	cpc	r25, r1
    380c:	09 f4       	brne	.+2      	; 0x3810 <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    380e:	75 c0       	rjmp	.+234    	; 0x38fa <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    3810:	2c 81       	ldd	r18, Y+4	; 0x04
    3812:	3d 81       	ldd	r19, Y+5	; 0x05
    3814:	27 30       	cpi	r18, 0x07	; 7
    3816:	31 05       	cpc	r19, r1
    3818:	09 f4       	brne	.+2      	; 0x381c <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    381a:	84 c0       	rjmp	.+264    	; 0x3924 <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    381c:	4c 81       	ldd	r20, Y+4	; 0x04
    381e:	5d 81       	ldd	r21, Y+5	; 0x05
    3820:	45 30       	cpi	r20, 0x05	; 5
    3822:	51 05       	cpc	r21, r1
    3824:	09 f4       	brne	.+2      	; 0x3828 <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    3826:	55 c0       	rjmp	.+170    	; 0x38d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    3828:	98 c0       	rjmp	.+304    	; 0x395a <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    382a:	8b 81       	ldd	r24, Y+3	; 0x03
    382c:	28 2f       	mov	r18, r24
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	8e ef       	ldi	r24, 0xFE	; 254
    3832:	91 e0       	ldi	r25, 0x01	; 1
    3834:	ac 01       	movw	r20, r24
    3836:	24 9f       	mul	r18, r20
    3838:	c0 01       	movw	r24, r0
    383a:	25 9f       	mul	r18, r21
    383c:	90 0d       	add	r25, r0
    383e:	34 9f       	mul	r19, r20
    3840:	90 0d       	add	r25, r0
    3842:	11 24       	eor	r1, r1
    3844:	24 e6       	ldi	r18, 0x64	; 100
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	b9 01       	movw	r22, r18
    384a:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    384e:	cb 01       	movw	r24, r22
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    3854:	ea e4       	ldi	r30, 0x4A	; 74
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	9a 81       	ldd	r25, Y+2	; 0x02
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	80 83       	st	Z, r24
    3860:	7c c0       	rjmp	.+248    	; 0x395a <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	28 2f       	mov	r18, r24
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	8e ef       	ldi	r24, 0xFE	; 254
    386a:	93 e0       	ldi	r25, 0x03	; 3
    386c:	ac 01       	movw	r20, r24
    386e:	24 9f       	mul	r18, r20
    3870:	c0 01       	movw	r24, r0
    3872:	25 9f       	mul	r18, r21
    3874:	90 0d       	add	r25, r0
    3876:	34 9f       	mul	r19, r20
    3878:	90 0d       	add	r25, r0
    387a:	11 24       	eor	r1, r1
    387c:	24 e6       	ldi	r18, 0x64	; 100
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	b9 01       	movw	r22, r18
    3882:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    3886:	cb 01       	movw	r24, r22
    3888:	9a 83       	std	Y+2, r25	; 0x02
    388a:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    388c:	ea e4       	ldi	r30, 0x4A	; 74
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	60 c0       	rjmp	.+192    	; 0x395a <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    389a:	8b 81       	ldd	r24, Y+3	; 0x03
    389c:	28 2f       	mov	r18, r24
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	8e ef       	ldi	r24, 0xFE	; 254
    38a2:	97 e0       	ldi	r25, 0x07	; 7
    38a4:	ac 01       	movw	r20, r24
    38a6:	24 9f       	mul	r18, r20
    38a8:	c0 01       	movw	r24, r0
    38aa:	25 9f       	mul	r18, r21
    38ac:	90 0d       	add	r25, r0
    38ae:	34 9f       	mul	r19, r20
    38b0:	90 0d       	add	r25, r0
    38b2:	11 24       	eor	r1, r1
    38b4:	24 e6       	ldi	r18, 0x64	; 100
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	b9 01       	movw	r22, r18
    38ba:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    38be:	cb 01       	movw	r24, r22
    38c0:	9a 83       	std	Y+2, r25	; 0x02
    38c2:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    38c4:	ea e4       	ldi	r30, 0x4A	; 74
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	9a 81       	ldd	r25, Y+2	; 0x02
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
    38d0:	44 c0       	rjmp	.+136    	; 0x395a <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;

	case TIMER1_MODE_FAST_PWM_8 :
		Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	88 2f       	mov	r24, r24
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	98 2f       	mov	r25, r24
    38da:	88 27       	eor	r24, r24
    38dc:	24 e6       	ldi	r18, 0x64	; 100
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	b9 01       	movw	r22, r18
    38e2:	0e 94 a1 20 	call	0x4142	; 0x4142 <__divmodhi4>
    38e6:	cb 01       	movw	r24, r22
    38e8:	9a 83       	std	Y+2, r25	; 0x02
    38ea:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    38ec:	ea e4       	ldi	r30, 0x4A	; 74
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	80 83       	st	Z, r24
    38f8:	30 c0       	rjmp	.+96     	; 0x395a <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	88 2f       	mov	r24, r24
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	98 2f       	mov	r25, r24
    3902:	88 27       	eor	r24, r24
    3904:	99 0f       	add	r25, r25
    3906:	24 e6       	ldi	r18, 0x64	; 100
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	b9 01       	movw	r22, r18
    390c:	0e 94 a1 20 	call	0x4142	; 0x4142 <__divmodhi4>
    3910:	cb 01       	movw	r24, r22
    3912:	9a 83       	std	Y+2, r25	; 0x02
    3914:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    3916:	ea e4       	ldi	r30, 0x4A	; 74
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	9a 81       	ldd	r25, Y+2	; 0x02
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	80 83       	st	Z, r24
    3922:	1b c0       	rjmp	.+54     	; 0x395a <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	28 2f       	mov	r18, r24
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	8f ef       	ldi	r24, 0xFF	; 255
    392c:	93 e0       	ldi	r25, 0x03	; 3
    392e:	ac 01       	movw	r20, r24
    3930:	24 9f       	mul	r18, r20
    3932:	c0 01       	movw	r24, r0
    3934:	25 9f       	mul	r18, r21
    3936:	90 0d       	add	r25, r0
    3938:	34 9f       	mul	r19, r20
    393a:	90 0d       	add	r25, r0
    393c:	11 24       	eor	r1, r1
    393e:	24 e6       	ldi	r18, 0x64	; 100
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	b9 01       	movw	r22, r18
    3944:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    3948:	cb 01       	movw	r24, r22
    394a:	9a 83       	std	Y+2, r25	; 0x02
    394c:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    394e:	ea e4       	ldi	r30, 0x4A	; 74
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	9a 81       	ldd	r25, Y+2	; 0x02
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
		break;
	}
}
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	00 d0       	rcall	.+0      	; 0x3970 <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    3970:	00 d0       	rcall	.+0      	; 0x3972 <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    3972:	0f 92       	push	r0
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    397a:	80 91 90 00 	lds	r24, 0x0090
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	3d 83       	std	Y+5, r19	; 0x05
    3984:	2c 83       	std	Y+4, r18	; 0x04
    3986:	4c 81       	ldd	r20, Y+4	; 0x04
    3988:	5d 81       	ldd	r21, Y+5	; 0x05
    398a:	43 30       	cpi	r20, 0x03	; 3
    398c:	51 05       	cpc	r21, r1
    398e:	09 f4       	brne	.+2      	; 0x3992 <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    3990:	5b c0       	rjmp	.+182    	; 0x3a48 <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    3992:	8c 81       	ldd	r24, Y+4	; 0x04
    3994:	9d 81       	ldd	r25, Y+5	; 0x05
    3996:	84 30       	cpi	r24, 0x04	; 4
    3998:	91 05       	cpc	r25, r1
    399a:	5c f4       	brge	.+22     	; 0x39b2 <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    399c:	2c 81       	ldd	r18, Y+4	; 0x04
    399e:	3d 81       	ldd	r19, Y+5	; 0x05
    39a0:	21 30       	cpi	r18, 0x01	; 1
    39a2:	31 05       	cpc	r19, r1
    39a4:	c9 f0       	breq	.+50     	; 0x39d8 <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    39a6:	4c 81       	ldd	r20, Y+4	; 0x04
    39a8:	5d 81       	ldd	r21, Y+5	; 0x05
    39aa:	42 30       	cpi	r20, 0x02	; 2
    39ac:	51 05       	cpc	r21, r1
    39ae:	81 f1       	breq	.+96     	; 0x3a10 <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    39b0:	ab c0       	rjmp	.+342    	; 0x3b08 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    39b2:	8c 81       	ldd	r24, Y+4	; 0x04
    39b4:	9d 81       	ldd	r25, Y+5	; 0x05
    39b6:	86 30       	cpi	r24, 0x06	; 6
    39b8:	91 05       	cpc	r25, r1
    39ba:	09 f4       	brne	.+2      	; 0x39be <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    39bc:	75 c0       	rjmp	.+234    	; 0x3aa8 <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    39be:	2c 81       	ldd	r18, Y+4	; 0x04
    39c0:	3d 81       	ldd	r19, Y+5	; 0x05
    39c2:	27 30       	cpi	r18, 0x07	; 7
    39c4:	31 05       	cpc	r19, r1
    39c6:	09 f4       	brne	.+2      	; 0x39ca <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    39c8:	84 c0       	rjmp	.+264    	; 0x3ad2 <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    39ca:	4c 81       	ldd	r20, Y+4	; 0x04
    39cc:	5d 81       	ldd	r21, Y+5	; 0x05
    39ce:	45 30       	cpi	r20, 0x05	; 5
    39d0:	51 05       	cpc	r21, r1
    39d2:	09 f4       	brne	.+2      	; 0x39d6 <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    39d4:	55 c0       	rjmp	.+170    	; 0x3a80 <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    39d6:	98 c0       	rjmp	.+304    	; 0x3b08 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    39d8:	8b 81       	ldd	r24, Y+3	; 0x03
    39da:	28 2f       	mov	r18, r24
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	8e ef       	ldi	r24, 0xFE	; 254
    39e0:	91 e0       	ldi	r25, 0x01	; 1
    39e2:	ac 01       	movw	r20, r24
    39e4:	24 9f       	mul	r18, r20
    39e6:	c0 01       	movw	r24, r0
    39e8:	25 9f       	mul	r18, r21
    39ea:	90 0d       	add	r25, r0
    39ec:	34 9f       	mul	r19, r20
    39ee:	90 0d       	add	r25, r0
    39f0:	11 24       	eor	r1, r1
    39f2:	24 e6       	ldi	r18, 0x64	; 100
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	b9 01       	movw	r22, r18
    39f8:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    39fc:	cb 01       	movw	r24, r22
    39fe:	9a 83       	std	Y+2, r25	; 0x02
    3a00:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    3a02:	e8 e4       	ldi	r30, 0x48	; 72
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
    3a0e:	7c c0       	rjmp	.+248    	; 0x3b08 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	28 2f       	mov	r18, r24
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	8e ef       	ldi	r24, 0xFE	; 254
    3a18:	93 e0       	ldi	r25, 0x03	; 3
    3a1a:	ac 01       	movw	r20, r24
    3a1c:	24 9f       	mul	r18, r20
    3a1e:	c0 01       	movw	r24, r0
    3a20:	25 9f       	mul	r18, r21
    3a22:	90 0d       	add	r25, r0
    3a24:	34 9f       	mul	r19, r20
    3a26:	90 0d       	add	r25, r0
    3a28:	11 24       	eor	r1, r1
    3a2a:	24 e6       	ldi	r18, 0x64	; 100
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	b9 01       	movw	r22, r18
    3a30:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    3a34:	cb 01       	movw	r24, r22
    3a36:	9a 83       	std	Y+2, r25	; 0x02
    3a38:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    3a3a:	e8 e4       	ldi	r30, 0x48	; 72
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	9a 81       	ldd	r25, Y+2	; 0x02
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24
    3a46:	60 c0       	rjmp	.+192    	; 0x3b08 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    3a48:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4a:	28 2f       	mov	r18, r24
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	8e ef       	ldi	r24, 0xFE	; 254
    3a50:	97 e0       	ldi	r25, 0x07	; 7
    3a52:	ac 01       	movw	r20, r24
    3a54:	24 9f       	mul	r18, r20
    3a56:	c0 01       	movw	r24, r0
    3a58:	25 9f       	mul	r18, r21
    3a5a:	90 0d       	add	r25, r0
    3a5c:	34 9f       	mul	r19, r20
    3a5e:	90 0d       	add	r25, r0
    3a60:	11 24       	eor	r1, r1
    3a62:	24 e6       	ldi	r18, 0x64	; 100
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	b9 01       	movw	r22, r18
    3a68:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9a 83       	std	Y+2, r25	; 0x02
    3a70:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    3a72:	e8 e4       	ldi	r30, 0x48	; 72
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7a:	91 83       	std	Z+1, r25	; 0x01
    3a7c:	80 83       	st	Z, r24
    3a7e:	44 c0       	rjmp	.+136    	; 0x3b08 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;

	case TIMER1_MODE_FAST_PWM_8 :
		Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    3a80:	8b 81       	ldd	r24, Y+3	; 0x03
    3a82:	88 2f       	mov	r24, r24
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	98 2f       	mov	r25, r24
    3a88:	88 27       	eor	r24, r24
    3a8a:	24 e6       	ldi	r18, 0x64	; 100
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	b9 01       	movw	r22, r18
    3a90:	0e 94 a1 20 	call	0x4142	; 0x4142 <__divmodhi4>
    3a94:	cb 01       	movw	r24, r22
    3a96:	9a 83       	std	Y+2, r25	; 0x02
    3a98:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    3a9a:	e8 e4       	ldi	r30, 0x48	; 72
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	91 83       	std	Z+1, r25	; 0x01
    3aa4:	80 83       	st	Z, r24
    3aa6:	30 c0       	rjmp	.+96     	; 0x3b08 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    3aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aaa:	88 2f       	mov	r24, r24
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	98 2f       	mov	r25, r24
    3ab0:	88 27       	eor	r24, r24
    3ab2:	99 0f       	add	r25, r25
    3ab4:	24 e6       	ldi	r18, 0x64	; 100
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	b9 01       	movw	r22, r18
    3aba:	0e 94 a1 20 	call	0x4142	; 0x4142 <__divmodhi4>
    3abe:	cb 01       	movw	r24, r22
    3ac0:	9a 83       	std	Y+2, r25	; 0x02
    3ac2:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    3ac4:	e8 e4       	ldi	r30, 0x48	; 72
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	9a 81       	ldd	r25, Y+2	; 0x02
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	80 83       	st	Z, r24
    3ad0:	1b c0       	rjmp	.+54     	; 0x3b08 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	28 2f       	mov	r18, r24
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	8f ef       	ldi	r24, 0xFF	; 255
    3ada:	93 e0       	ldi	r25, 0x03	; 3
    3adc:	ac 01       	movw	r20, r24
    3ade:	24 9f       	mul	r18, r20
    3ae0:	c0 01       	movw	r24, r0
    3ae2:	25 9f       	mul	r18, r21
    3ae4:	90 0d       	add	r25, r0
    3ae6:	34 9f       	mul	r19, r20
    3ae8:	90 0d       	add	r25, r0
    3aea:	11 24       	eor	r1, r1
    3aec:	24 e6       	ldi	r18, 0x64	; 100
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	b9 01       	movw	r22, r18
    3af2:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    3af6:	cb 01       	movw	r24, r22
    3af8:	9a 83       	std	Y+2, r25	; 0x02
    3afa:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    3afc:	e8 e4       	ldi	r30, 0x48	; 72
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	9a 81       	ldd	r25, Y+2	; 0x02
    3b04:	91 83       	std	Z+1, r25	; 0x01
    3b06:	80 83       	st	Z, r24
		break;
	}
}
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	00 d0       	rcall	.+0      	; 0x3b1e <TIMER_voidTimer1SetOCR1A+0x6>
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = (u8)(Copy_u16OCR1A>>8);
    3b26:	eb e4       	ldi	r30, 0x4B	; 75
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2e:	89 2f       	mov	r24, r25
    3b30:	99 27       	eor	r25, r25
    3b32:	80 83       	st	Z, r24
	OCR1AL = (u8)(Copy_u16OCR1A);
    3b34:	ea e4       	ldi	r30, 0x4A	; 74
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	80 83       	st	Z, r24
}
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	08 95       	ret

00003b46 <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	00 d0       	rcall	.+0      	; 0x3b4c <TIMER_voidTimer1SetOCR1B+0x6>
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	9a 83       	std	Y+2, r25	; 0x02
    3b52:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH = (u8)(Copy_u16OCR1B>>8);
    3b54:	e9 e4       	ldi	r30, 0x49	; 73
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5c:	89 2f       	mov	r24, r25
    3b5e:	99 27       	eor	r25, r25
    3b60:	80 83       	st	Z, r24
	OCR1BL = (u8)(Copy_u16OCR1B);
    3b62:	e8 e4       	ldi	r30, 0x48	; 72
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	80 83       	st	Z, r24
}
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	08 95       	ret

00003b74 <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	00 d0       	rcall	.+0      	; 0x3b7a <TIMER_voidTimer1SetICR1+0x6>
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
    3b7e:	9a 83       	std	Y+2, r25	; 0x02
    3b80:	89 83       	std	Y+1, r24	; 0x01
	ICR1H = (u8)(Copy_u16ICR1>>8);
    3b82:	e7 e4       	ldi	r30, 0x47	; 71
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8a:	89 2f       	mov	r24, r25
    3b8c:	99 27       	eor	r25, r25
    3b8e:	80 83       	st	Z, r24
	ICR1L = (u8)(Copy_u16ICR1);
    3b90:	e6 e4       	ldi	r30, 0x46	; 70
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	80 83       	st	Z, r24
}
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	08 95       	ret

00003ba2 <TIMER_voidTimer1Stop>:

void TIMER_voidTimer1Stop(void)
{
    3ba2:	df 93       	push	r29
    3ba4:	cf 93       	push	r28
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    3baa:	ae e4       	ldi	r26, 0x4E	; 78
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	ee e4       	ldi	r30, 0x4E	; 78
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	80 81       	ld	r24, Z
    3bb4:	8b 7f       	andi	r24, 0xFB	; 251
    3bb6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    3bb8:	ae e4       	ldi	r26, 0x4E	; 78
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	ee e4       	ldi	r30, 0x4E	; 78
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	8d 7f       	andi	r24, 0xFD	; 253
    3bc4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    3bc6:	ae e4       	ldi	r26, 0x4E	; 78
    3bc8:	b0 e0       	ldi	r27, 0x00	; 0
    3bca:	ee e4       	ldi	r30, 0x4E	; 78
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	80 81       	ld	r24, Z
    3bd0:	8e 7f       	andi	r24, 0xFE	; 254
    3bd2:	8c 93       	st	X, r24
}
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	08 95       	ret

00003bda <TIMER_voidTimer1Continue>:
void TIMER_voidTimer1Continue(void)
{
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_CS12);
    3be2:	ae e4       	ldi	r26, 0x4E	; 78
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	ee e4       	ldi	r30, 0x4E	; 78
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	84 60       	ori	r24, 0x04	; 4
    3bee:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS10);
    3bf0:	ae e4       	ldi	r26, 0x4E	; 78
    3bf2:	b0 e0       	ldi	r27, 0x00	; 0
    3bf4:	ee e4       	ldi	r30, 0x4E	; 78
    3bf6:	f0 e0       	ldi	r31, 0x00	; 0
    3bf8:	80 81       	ld	r24, Z
    3bfa:	81 60       	ori	r24, 0x01	; 1
    3bfc:	8c 93       	st	X, r24
}
    3bfe:	cf 91       	pop	r28
    3c00:	df 91       	pop	r29
    3c02:	08 95       	ret

00003c04 <TIMER_voidTimer1SetCallBack>:
void TIMER_voidTimer1SetCallBack(void (*Copy_pFun) (void))
{
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <TIMER_voidTimer1SetCallBack+0x6>
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	9a 83       	std	Y+2, r25	; 0x02
    3c10:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_pSetCallBack = Copy_pFun;
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	90 93 88 00 	sts	0x0088, r25
    3c1a:	80 93 87 00 	sts	0x0087, r24
}
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	08 95       	ret

00003c28 <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
	/* Timer1 always operates in Normal Mode */
	SET_BIT(TCCR1A,TCCR1A_FOC1A);
    3c30:	af e4       	ldi	r26, 0x4F	; 79
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	ef e4       	ldi	r30, 0x4F	; 79
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	88 60       	ori	r24, 0x08	; 8
    3c3c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_FOC1B);
    3c3e:	af e4       	ldi	r26, 0x4F	; 79
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	ef e4       	ldi	r30, 0x4F	; 79
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	80 81       	ld	r24, Z
    3c48:	84 60       	ori	r24, 0x04	; 4
    3c4a:	8c 93       	st	X, r24

	/* Insert the required edge type in ICES1 bit in TCCR1B Register */
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    3c4c:	ae e4       	ldi	r26, 0x4E	; 78
    3c4e:	b0 e0       	ldi	r27, 0x00	; 0
    3c50:	ee e4       	ldi	r30, 0x4E	; 78
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	80 81       	ld	r24, Z
    3c56:	80 64       	ori	r24, 0x40	; 64
    3c58:	8c 93       	st	X, r24

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    3c5a:	a9 e5       	ldi	r26, 0x59	; 89
    3c5c:	b0 e0       	ldi	r27, 0x00	; 0
    3c5e:	e9 e5       	ldi	r30, 0x59	; 89
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	80 81       	ld	r24, Z
    3c64:	80 62       	ori	r24, 0x20	; 32
    3c66:	8c 93       	st	X, r24

	/* Insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register */
	/* 8 MHZ */
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    3c68:	ae e4       	ldi	r26, 0x4E	; 78
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	ee e4       	ldi	r30, 0x4E	; 78
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	80 81       	ld	r24, Z
    3c72:	8e 7f       	andi	r24, 0xFE	; 254
    3c74:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    3c76:	ae e4       	ldi	r26, 0x4E	; 78
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	ee e4       	ldi	r30, 0x4E	; 78
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	82 60       	ori	r24, 0x02	; 2
    3c82:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    3c84:	ae e4       	ldi	r26, 0x4E	; 78
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	ee e4       	ldi	r30, 0x4E	; 78
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	8b 7f       	andi	r24, 0xFB	; 251
    3c90:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    3c92:	ec e4       	ldi	r30, 0x4C	; 76
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	11 82       	std	Z+1, r1	; 0x01
    3c98:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    3c9a:	e6 e4       	ldi	r30, 0x46	; 70
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	11 82       	std	Z+1, r1	; 0x01
    3ca0:	10 82       	st	Z, r1
}
    3ca2:	cf 91       	pop	r28
    3ca4:	df 91       	pop	r29
    3ca6:	08 95       	ret

00003ca8 <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    3ca8:	df 93       	push	r29
    3caa:	cf 93       	push	r28
    3cac:	0f 92       	push	r0
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	81 30       	cpi	r24, 0x01	; 1
    3cb8:	41 f4       	brne	.+16     	; 0x3cca <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    3cba:	ae e4       	ldi	r26, 0x4E	; 78
    3cbc:	b0 e0       	ldi	r27, 0x00	; 0
    3cbe:	ee e4       	ldi	r30, 0x4E	; 78
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	80 81       	ld	r24, Z
    3cc4:	80 64       	ori	r24, 0x40	; 64
    3cc6:	8c 93       	st	X, r24
    3cc8:	0a c0       	rjmp	.+20     	; 0x3cde <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
	}
	else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	88 23       	and	r24, r24
    3cce:	39 f4       	brne	.+14     	; 0x3cde <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    3cd0:	ae e4       	ldi	r26, 0x4E	; 78
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	ee e4       	ldi	r30, 0x4E	; 78
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	80 81       	ld	r24, Z
    3cda:	8f 7b       	andi	r24, 0xBF	; 191
    3cdc:	8c 93       	st	X, r24
	}
}
    3cde:	0f 90       	pop	r0
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	08 95       	ret

00003ce6 <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    3ce6:	df 93       	push	r29
    3ce8:	cf 93       	push	r28
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
	return TIMER_u16_ICR1;
    3cee:	e6 e4       	ldi	r30, 0x46	; 70
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
}
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	00 d0       	rcall	.+0      	; 0x3d02 <TIMER_voidTimer1ICUSetCallBack+0x6>
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	9a 83       	std	Y+2, r25	; 0x02
    3d08:	89 83       	std	Y+1, r24	; 0x01
	Timer1_pICUSetCallBack = Copy_pFun;
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0e:	90 93 8c 00 	sts	0x008C, r25
    3d12:	80 93 8b 00 	sts	0x008B, r24
}
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	cf 91       	pop	r28
    3d1c:	df 91       	pop	r29
    3d1e:	08 95       	ret

00003d20 <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    3d20:	df 93       	push	r29
    3d22:	cf 93       	push	r28
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
	TIMER_u16_TCNT1 = 0;
    3d28:	ec e4       	ldi	r30, 0x4C	; 76
    3d2a:	f0 e0       	ldi	r31, 0x00	; 0
    3d2c:	11 82       	std	Z+1, r1	; 0x01
    3d2e:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    3d30:	a9 e5       	ldi	r26, 0x59	; 89
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    3d34:	e9 e5       	ldi	r30, 0x59	; 89
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	80 81       	ld	r24, Z
    3d3a:	8f 7d       	andi	r24, 0xDF	; 223
    3d3c:	8c 93       	st	X, r24
}
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <__vector_5>:

void __vector_5 (void)
{
    3d44:	1f 92       	push	r1
    3d46:	0f 92       	push	r0
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	0f 92       	push	r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	2f 93       	push	r18
    3d50:	3f 93       	push	r19
    3d52:	4f 93       	push	r20
    3d54:	5f 93       	push	r21
    3d56:	6f 93       	push	r22
    3d58:	7f 93       	push	r23
    3d5a:	8f 93       	push	r24
    3d5c:	9f 93       	push	r25
    3d5e:	af 93       	push	r26
    3d60:	bf 93       	push	r27
    3d62:	ef 93       	push	r30
    3d64:	ff 93       	push	r31
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    3d6e:	80 91 8b 00 	lds	r24, 0x008B
    3d72:	90 91 8c 00 	lds	r25, 0x008C
    3d76:	00 97       	sbiw	r24, 0x00	; 0
    3d78:	29 f0       	breq	.+10     	; 0x3d84 <__vector_5+0x40>
	{
		Timer1_pICUSetCallBack();
    3d7a:	e0 91 8b 00 	lds	r30, 0x008B
    3d7e:	f0 91 8c 00 	lds	r31, 0x008C
    3d82:	09 95       	icall
	}
}
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	ff 91       	pop	r31
    3d8a:	ef 91       	pop	r30
    3d8c:	bf 91       	pop	r27
    3d8e:	af 91       	pop	r26
    3d90:	9f 91       	pop	r25
    3d92:	8f 91       	pop	r24
    3d94:	7f 91       	pop	r23
    3d96:	6f 91       	pop	r22
    3d98:	5f 91       	pop	r21
    3d9a:	4f 91       	pop	r20
    3d9c:	3f 91       	pop	r19
    3d9e:	2f 91       	pop	r18
    3da0:	0f 90       	pop	r0
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	0f 90       	pop	r0
    3da6:	1f 90       	pop	r1
    3da8:	18 95       	reti

00003daa <__vector_6>:

void __vector_6 (void)
{
    3daa:	1f 92       	push	r1
    3dac:	0f 92       	push	r0
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	0f 92       	push	r0
    3db2:	11 24       	eor	r1, r1
    3db4:	2f 93       	push	r18
    3db6:	3f 93       	push	r19
    3db8:	4f 93       	push	r20
    3dba:	5f 93       	push	r21
    3dbc:	6f 93       	push	r22
    3dbe:	7f 93       	push	r23
    3dc0:	8f 93       	push	r24
    3dc2:	9f 93       	push	r25
    3dc4:	af 93       	push	r26
    3dc6:	bf 93       	push	r27
    3dc8:	ef 93       	push	r30
    3dca:	ff 93       	push	r31
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
	if (TIMER1_pSetCallBack!=NULL)
    3dd4:	80 91 87 00 	lds	r24, 0x0087
    3dd8:	90 91 88 00 	lds	r25, 0x0088
    3ddc:	00 97       	sbiw	r24, 0x00	; 0
    3dde:	29 f0       	breq	.+10     	; 0x3dea <__vector_6+0x40>
	{
		TIMER1_pSetCallBack();
    3de0:	e0 91 87 00 	lds	r30, 0x0087
    3de4:	f0 91 88 00 	lds	r31, 0x0088
    3de8:	09 95       	icall
	}
}
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	ff 91       	pop	r31
    3df0:	ef 91       	pop	r30
    3df2:	bf 91       	pop	r27
    3df4:	af 91       	pop	r26
    3df6:	9f 91       	pop	r25
    3df8:	8f 91       	pop	r24
    3dfa:	7f 91       	pop	r23
    3dfc:	6f 91       	pop	r22
    3dfe:	5f 91       	pop	r21
    3e00:	4f 91       	pop	r20
    3e02:	3f 91       	pop	r19
    3e04:	2f 91       	pop	r18
    3e06:	0f 90       	pop	r0
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	0f 90       	pop	r0
    3e0c:	1f 90       	pop	r1
    3e0e:	18 95       	reti

00003e10 <ULTRASONIC_voidEdgeProcessing>:

u8 ULTRASONIC_u8EdgeCounter = 0;
u16 ULTRASONIC_u16TimeON = 0;

void ULTRASONIC_voidEdgeProcessing(void)
{
    3e10:	df 93       	push	r29
    3e12:	cf 93       	push	r28
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
	ULTRASONIC_u8EdgeCounter++;
    3e18:	80 91 8d 00 	lds	r24, 0x008D
    3e1c:	8f 5f       	subi	r24, 0xFF	; 255
    3e1e:	80 93 8d 00 	sts	0x008D, r24

	/* First edge*/
	if(ULTRASONIC_u8EdgeCounter == 1)
    3e22:	80 91 8d 00 	lds	r24, 0x008D
    3e26:	81 30       	cpi	r24, 0x01	; 1
    3e28:	31 f4       	brne	.+12     	; 0x3e36 <ULTRASONIC_voidEdgeProcessing+0x26>
	{
		/*Clear ICU timer */
		TIMER_voidClearTimer1Value();
    3e2a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <TIMER_voidClearTimer1Value>

		/* Detect Falling edge */
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_FALLING_EDGY_TYPE_MODE);
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <TIMER_voidTimer1ICUSetTriggerEdge>
    3e34:	11 c0       	rjmp	.+34     	; 0x3e58 <ULTRASONIC_voidEdgeProcessing+0x48>
	}

	/* Second edge*/
	else if(ULTRASONIC_u8EdgeCounter == 2)
    3e36:	80 91 8d 00 	lds	r24, 0x008D
    3e3a:	82 30       	cpi	r24, 0x02	; 2
    3e3c:	69 f4       	brne	.+26     	; 0x3e58 <ULTRASONIC_voidEdgeProcessing+0x48>
	{
		ULTRASONIC_u16TimeON = TIMER_voidTimer1ICUGetInputCaptureValue();
    3e3e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <TIMER_voidTimer1ICUGetInputCaptureValue>
    3e42:	90 93 8f 00 	sts	0x008F, r25
    3e46:	80 93 8e 00 	sts	0x008E, r24

		/*Clear ICU timer */
		TIMER_voidClearTimer1Value();
    3e4a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <TIMER_voidClearTimer1Value>
		ULTRASONIC_u8EdgeCounter=0;
    3e4e:	10 92 8d 00 	sts	0x008D, r1
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_RISING_EDGY_TYPE_MODE);
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <TIMER_voidTimer1ICUSetTriggerEdge>
	}
}
    3e58:	cf 91       	pop	r28
    3e5a:	df 91       	pop	r29
    3e5c:	08 95       	ret

00003e5e <ULTRASONIC_voidInit>:

void ULTRASONIC_voidInit(void)
{
    3e5e:	df 93       	push	r29
    3e60:	cf 93       	push	r28
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Icu */
	TIMER_voidTimer1ICUInit();
    3e66:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <TIMER_voidTimer1ICUInit>

	/* call back edge processing function */
	TIMER_voidTimer1ICUSetCallBack(&ULTRASONIC_voidEdgeProcessing);
    3e6a:	88 e0       	ldi	r24, 0x08	; 8
    3e6c:	9f e1       	ldi	r25, 0x1F	; 31
    3e6e:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <TIMER_voidTimer1ICUSetCallBack>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN6,DIO_u8PIN_INPUT);
    3e72:	83 e0       	ldi	r24, 0x03	; 3
    3e74:	66 e0       	ldi	r22, 0x06	; 6
    3e76:	40 e0       	ldi	r20, 0x00	; 0
    3e78:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8PIN_OUTPUT);
    3e7c:	82 e0       	ldi	r24, 0x02	; 2
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8PIN_LOW);
    3e86:	82 e0       	ldi	r24, 0x02	; 2
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
}
    3e90:	cf 91       	pop	r28
    3e92:	df 91       	pop	r29
    3e94:	08 95       	ret

00003e96 <ULTRASONIC_voidTrigger>:
void ULTRASONIC_voidTrigger(void)
{
    3e96:	df 93       	push	r29
    3e98:	cf 93       	push	r28
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	68 97       	sbiw	r28, 0x18	; 24
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	de bf       	out	0x3e, r29	; 62
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8PIN_HIGH);
    3eaa:	82 e0       	ldi	r24, 0x02	; 2
    3eac:	60 e0       	ldi	r22, 0x00	; 0
    3eae:	41 e0       	ldi	r20, 0x01	; 1
    3eb0:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	a0 e7       	ldi	r26, 0x70	; 112
    3eba:	b1 e4       	ldi	r27, 0x41	; 65
    3ebc:	8d 8b       	std	Y+21, r24	; 0x15
    3ebe:	9e 8b       	std	Y+22, r25	; 0x16
    3ec0:	af 8b       	std	Y+23, r26	; 0x17
    3ec2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    3eca:	98 8d       	ldd	r25, Y+24	; 0x18
    3ecc:	2b ea       	ldi	r18, 0xAB	; 171
    3ece:	3a ea       	ldi	r19, 0xAA	; 170
    3ed0:	4a e2       	ldi	r20, 0x2A	; 42
    3ed2:	50 e4       	ldi	r21, 0x40	; 64
    3ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	89 8b       	std	Y+17, r24	; 0x11
    3ede:	9a 8b       	std	Y+18, r25	; 0x12
    3ee0:	ab 8b       	std	Y+19, r26	; 0x13
    3ee2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3ee4:	69 89       	ldd	r22, Y+17	; 0x11
    3ee6:	7a 89       	ldd	r23, Y+18	; 0x12
    3ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eea:	9c 89       	ldd	r25, Y+20	; 0x14
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e8       	ldi	r20, 0x80	; 128
    3ef2:	5f e3       	ldi	r21, 0x3F	; 63
    3ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef8:	88 23       	and	r24, r24
    3efa:	1c f4       	brge	.+6      	; 0x3f02 <ULTRASONIC_voidTrigger+0x6c>
		__ticks = 1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	88 8b       	std	Y+16, r24	; 0x10
    3f00:	91 c0       	rjmp	.+290    	; 0x4024 <ULTRASONIC_voidTrigger+0x18e>
	else if (__tmp > 255)
    3f02:	69 89       	ldd	r22, Y+17	; 0x11
    3f04:	7a 89       	ldd	r23, Y+18	; 0x12
    3f06:	8b 89       	ldd	r24, Y+19	; 0x13
    3f08:	9c 89       	ldd	r25, Y+20	; 0x14
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	4f e7       	ldi	r20, 0x7F	; 127
    3f10:	53 e4       	ldi	r21, 0x43	; 67
    3f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f16:	18 16       	cp	r1, r24
    3f18:	0c f0       	brlt	.+2      	; 0x3f1c <ULTRASONIC_voidTrigger+0x86>
    3f1a:	7b c0       	rjmp	.+246    	; 0x4012 <ULTRASONIC_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f20:	8f 89       	ldd	r24, Y+23	; 0x17
    3f22:	98 8d       	ldd	r25, Y+24	; 0x18
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	4a e7       	ldi	r20, 0x7A	; 122
    3f2a:	54 e4       	ldi	r21, 0x44	; 68
    3f2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f30:	dc 01       	movw	r26, r24
    3f32:	cb 01       	movw	r24, r22
    3f34:	8c 87       	std	Y+12, r24	; 0x0c
    3f36:	9d 87       	std	Y+13, r25	; 0x0d
    3f38:	ae 87       	std	Y+14, r26	; 0x0e
    3f3a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f40:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f42:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	4a ef       	ldi	r20, 0xFA	; 250
    3f4a:	54 e4       	ldi	r21, 0x44	; 68
    3f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	88 87       	std	Y+8, r24	; 0x08
    3f56:	99 87       	std	Y+9, r25	; 0x09
    3f58:	aa 87       	std	Y+10, r26	; 0x0a
    3f5a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3f5c:	68 85       	ldd	r22, Y+8	; 0x08
    3f5e:	79 85       	ldd	r23, Y+9	; 0x09
    3f60:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f62:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e8       	ldi	r20, 0x80	; 128
    3f6a:	5f e3       	ldi	r21, 0x3F	; 63
    3f6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f70:	88 23       	and	r24, r24
    3f72:	2c f4       	brge	.+10     	; 0x3f7e <ULTRASONIC_voidTrigger+0xe8>
		__ticks = 1;
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	9f 83       	std	Y+7, r25	; 0x07
    3f7a:	8e 83       	std	Y+6, r24	; 0x06
    3f7c:	3f c0       	rjmp	.+126    	; 0x3ffc <ULTRASONIC_voidTrigger+0x166>
	else if (__tmp > 65535)
    3f7e:	68 85       	ldd	r22, Y+8	; 0x08
    3f80:	79 85       	ldd	r23, Y+9	; 0x09
    3f82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f84:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	3f ef       	ldi	r19, 0xFF	; 255
    3f8a:	4f e7       	ldi	r20, 0x7F	; 127
    3f8c:	57 e4       	ldi	r21, 0x47	; 71
    3f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f92:	18 16       	cp	r1, r24
    3f94:	4c f5       	brge	.+82     	; 0x3fe8 <ULTRASONIC_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f96:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f98:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	40 e2       	ldi	r20, 0x20	; 32
    3fa4:	51 e4       	ldi	r21, 0x41	; 65
    3fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	bc 01       	movw	r22, r24
    3fb0:	cd 01       	movw	r24, r26
    3fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	9f 83       	std	Y+7, r25	; 0x07
    3fbc:	8e 83       	std	Y+6, r24	; 0x06
    3fbe:	0f c0       	rjmp	.+30     	; 0x3fde <ULTRASONIC_voidTrigger+0x148>
    3fc0:	88 ec       	ldi	r24, 0xC8	; 200
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	9d 83       	std	Y+5, r25	; 0x05
    3fc6:	8c 83       	std	Y+4, r24	; 0x04
    3fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3fca:	9d 81       	ldd	r25, Y+5	; 0x05
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	f1 f7       	brne	.-4      	; 0x3fcc <ULTRASONIC_voidTrigger+0x136>
    3fd0:	9d 83       	std	Y+5, r25	; 0x05
    3fd2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	9f 83       	std	Y+7, r25	; 0x07
    3fdc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fde:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	69 f7       	brne	.-38     	; 0x3fc0 <ULTRASONIC_voidTrigger+0x12a>
    3fe6:	24 c0       	rjmp	.+72     	; 0x4030 <ULTRASONIC_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe8:	68 85       	ldd	r22, Y+8	; 0x08
    3fea:	79 85       	ldd	r23, Y+9	; 0x09
    3fec:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fee:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	9f 83       	std	Y+7, r25	; 0x07
    3ffa:	8e 83       	std	Y+6, r24	; 0x06
    3ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    4000:	9b 83       	std	Y+3, r25	; 0x03
    4002:	8a 83       	std	Y+2, r24	; 0x02
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	9b 81       	ldd	r25, Y+3	; 0x03
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <ULTRASONIC_voidTrigger+0x172>
    400c:	9b 83       	std	Y+3, r25	; 0x03
    400e:	8a 83       	std	Y+2, r24	; 0x02
    4010:	0f c0       	rjmp	.+30     	; 0x4030 <ULTRASONIC_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4012:	69 89       	ldd	r22, Y+17	; 0x11
    4014:	7a 89       	ldd	r23, Y+18	; 0x12
    4016:	8b 89       	ldd	r24, Y+19	; 0x13
    4018:	9c 89       	ldd	r25, Y+20	; 0x14
    401a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	88 8b       	std	Y+16, r24	; 0x10
    4024:	88 89       	ldd	r24, Y+16	; 0x10
    4026:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4028:	89 81       	ldd	r24, Y+1	; 0x01
    402a:	8a 95       	dec	r24
    402c:	f1 f7       	brne	.-4      	; 0x402a <ULTRASONIC_voidTrigger+0x194>
    402e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	DIO_u8SetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8PIN_LOW);
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	60 e0       	ldi	r22, 0x00	; 0
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	0e 94 31 13 	call	0x2662	; 0x2662 <DIO_u8SetPinValue>
}
    403a:	68 96       	adiw	r28, 0x18	; 24
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	de bf       	out	0x3e, r29	; 62
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	cd bf       	out	0x3d, r28	; 61
    4046:	cf 91       	pop	r28
    4048:	df 91       	pop	r29
    404a:	08 95       	ret

0000404c <ULTRASONIC_u16GetDistance>:
u16 ULTRASONIC_u16GetDistance(void)
{
    404c:	df 93       	push	r29
    404e:	cf 93       	push	r28
    4050:	00 d0       	rcall	.+0      	; 0x4052 <ULTRASONIC_u16GetDistance+0x6>
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Distance = 0;
    4056:	1a 82       	std	Y+2, r1	; 0x02
    4058:	19 82       	std	Y+1, r1	; 0x01

		 ULTRASONIC_voidTrigger();
    405a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <ULTRASONIC_voidTrigger>
		  * Prescaler F_CPU/8 for timer frequency.
		  * The timer gets incremented after 1 us time elapse.
		  * Distance (cm)= 17000 x (TIMER value) x 1 x 10^-6 cm
	      * Distance (cm)= (TIMER value) / 58 cm
	      * */
	     Local_u16Distance=(ULTRASONIC_u16TimeON/(58)+1); /* Calculating Distance In cm */
    405e:	80 91 8e 00 	lds	r24, 0x008E
    4062:	90 91 8f 00 	lds	r25, 0x008F
    4066:	2a e3       	ldi	r18, 0x3A	; 58
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	b9 01       	movw	r22, r18
    406c:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    4070:	cb 01       	movw	r24, r22
    4072:	01 96       	adiw	r24, 0x01	; 1
    4074:	9a 83       	std	Y+2, r25	; 0x02
    4076:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16Distance;
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	cf 91       	pop	r28
    4082:	df 91       	pop	r29
    4084:	08 95       	ret

00004086 <main>:
#include "CLCD_interface.h"
#include "Ultrasonic_interface.h"


void main(void)
{
    4086:	df 93       	push	r29
    4088:	cf 93       	push	r28
    408a:	00 d0       	rcall	.+0      	; 0x408c <main+0x6>
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Distancevalue;

	/* Enable Global Interrupt */
	GIE_voidEnable();
    4090:	0e 94 04 16 	call	0x2c08	; 0x2c08 <GIE_voidEnable>

	/* Initialize LCD */
	CLCD_voidInit();
    4094:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <CLCD_voidInit>

	/* Initialize Ultrasonic */
	ULTRASONIC_voidInit();
    4098:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <ULTRASONIC_voidInit>

	CLCD_voidSendString("Distance =    cm");
    409c:	80 e6       	ldi	r24, 0x60	; 96
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>


	for(;;)
	{
		/* Get ultrasonic measured distance */
		Local_u16Distancevalue=ULTRASONIC_u16GetDistance();
    40a4:	0e 94 26 20 	call	0x404c	; 0x404c <ULTRASONIC_u16GetDistance>
    40a8:	9a 83       	std	Y+2, r25	; 0x02
    40aa:	89 83       	std	Y+1, r24	; 0x01

		/* Display ultrasonic measured distance in this location */
		CLCD_voidGoToXY(0,11);
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	6b e0       	ldi	r22, 0x0B	; 11
    40b0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <CLCD_voidGoToXY>

		/* Maxmium value = 500 */
		if(Local_u16Distancevalue<=500 && Local_u16Distancevalue>=100)
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	9a 81       	ldd	r25, Y+2	; 0x02
    40b8:	21 e0       	ldi	r18, 0x01	; 1
    40ba:	85 3f       	cpi	r24, 0xF5	; 245
    40bc:	92 07       	cpc	r25, r18
    40be:	48 f4       	brcc	.+18     	; 0x40d2 <main+0x4c>
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	9a 81       	ldd	r25, Y+2	; 0x02
    40c4:	84 36       	cpi	r24, 0x64	; 100
    40c6:	91 05       	cpc	r25, r1
    40c8:	20 f0       	brcs	.+8      	; 0x40d2 <main+0x4c>
		{
			/* Display ultrasonic value in LCD */
			CLCD_voidIntegerToString(Local_u16Distancevalue);
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <CLCD_voidIntegerToString>
    40d0:	e9 cf       	rjmp	.-46     	; 0x40a4 <main+0x1e>
		}
		else if(Local_u16Distancevalue<=500 && Local_u16Distancevalue>=10)
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	9a 81       	ldd	r25, Y+2	; 0x02
    40d6:	21 e0       	ldi	r18, 0x01	; 1
    40d8:	85 3f       	cpi	r24, 0xF5	; 245
    40da:	92 07       	cpc	r25, r18
    40dc:	60 f4       	brcc	.+24     	; 0x40f6 <main+0x70>
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	9a 81       	ldd	r25, Y+2	; 0x02
    40e2:	8a 30       	cpi	r24, 0x0A	; 10
    40e4:	91 05       	cpc	r25, r1
    40e6:	38 f0       	brcs	.+14     	; 0x40f6 <main+0x70>
		{
			/* Display ultrasonic value in LCD */
			CLCD_voidIntegerToString(Local_u16Distancevalue);
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	0e 94 e5 10 	call	0x21ca	; 0x21ca <CLCD_voidIntegerToString>

			/* To remove third bit */
			CLCD_voidSendData(' ');
    40ee:	80 e2       	ldi	r24, 0x20	; 32
    40f0:	0e 94 a6 0a 	call	0x154c	; 0x154c <CLCD_voidSendData>
    40f4:	d7 cf       	rjmp	.-82     	; 0x40a4 <main+0x1e>
		}
		else if(Local_u16Distancevalue<10 && Local_u16Distancevalue>=3)
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	9a 81       	ldd	r25, Y+2	; 0x02
    40fa:	8a 30       	cpi	r24, 0x0A	; 10
    40fc:	91 05       	cpc	r25, r1
    40fe:	90 f6       	brcc	.-92     	; 0x40a4 <main+0x1e>
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	83 30       	cpi	r24, 0x03	; 3
    4106:	91 05       	cpc	r25, r1
    4108:	68 f2       	brcs	.-102    	; 0x40a4 <main+0x1e>
		{
			/* Display ultrasonic value in LCD */
			CLCD_voidIntegerToString(Local_u16Distancevalue);
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <CLCD_voidIntegerToString>

			/* To remove second bit */
			CLCD_voidSendString("  ");
    4110:	81 e7       	ldi	r24, 0x71	; 113
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidSendString>
    4118:	c5 cf       	rjmp	.-118    	; 0x40a4 <main+0x1e>

0000411a <__udivmodhi4>:
    411a:	aa 1b       	sub	r26, r26
    411c:	bb 1b       	sub	r27, r27
    411e:	51 e1       	ldi	r21, 0x11	; 17
    4120:	07 c0       	rjmp	.+14     	; 0x4130 <__udivmodhi4_ep>

00004122 <__udivmodhi4_loop>:
    4122:	aa 1f       	adc	r26, r26
    4124:	bb 1f       	adc	r27, r27
    4126:	a6 17       	cp	r26, r22
    4128:	b7 07       	cpc	r27, r23
    412a:	10 f0       	brcs	.+4      	; 0x4130 <__udivmodhi4_ep>
    412c:	a6 1b       	sub	r26, r22
    412e:	b7 0b       	sbc	r27, r23

00004130 <__udivmodhi4_ep>:
    4130:	88 1f       	adc	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	5a 95       	dec	r21
    4136:	a9 f7       	brne	.-22     	; 0x4122 <__udivmodhi4_loop>
    4138:	80 95       	com	r24
    413a:	90 95       	com	r25
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	08 95       	ret

00004142 <__divmodhi4>:
    4142:	97 fb       	bst	r25, 7
    4144:	09 2e       	mov	r0, r25
    4146:	07 26       	eor	r0, r23
    4148:	0a d0       	rcall	.+20     	; 0x415e <__divmodhi4_neg1>
    414a:	77 fd       	sbrc	r23, 7
    414c:	04 d0       	rcall	.+8      	; 0x4156 <__divmodhi4_neg2>
    414e:	e5 df       	rcall	.-54     	; 0x411a <__udivmodhi4>
    4150:	06 d0       	rcall	.+12     	; 0x415e <__divmodhi4_neg1>
    4152:	00 20       	and	r0, r0
    4154:	1a f4       	brpl	.+6      	; 0x415c <__divmodhi4_exit>

00004156 <__divmodhi4_neg2>:
    4156:	70 95       	com	r23
    4158:	61 95       	neg	r22
    415a:	7f 4f       	sbci	r23, 0xFF	; 255

0000415c <__divmodhi4_exit>:
    415c:	08 95       	ret

0000415e <__divmodhi4_neg1>:
    415e:	f6 f7       	brtc	.-4      	; 0x415c <__divmodhi4_exit>
    4160:	90 95       	com	r25
    4162:	81 95       	neg	r24
    4164:	9f 4f       	sbci	r25, 0xFF	; 255
    4166:	08 95       	ret

00004168 <__udivmodsi4>:
    4168:	a1 e2       	ldi	r26, 0x21	; 33
    416a:	1a 2e       	mov	r1, r26
    416c:	aa 1b       	sub	r26, r26
    416e:	bb 1b       	sub	r27, r27
    4170:	fd 01       	movw	r30, r26
    4172:	0d c0       	rjmp	.+26     	; 0x418e <__udivmodsi4_ep>

00004174 <__udivmodsi4_loop>:
    4174:	aa 1f       	adc	r26, r26
    4176:	bb 1f       	adc	r27, r27
    4178:	ee 1f       	adc	r30, r30
    417a:	ff 1f       	adc	r31, r31
    417c:	a2 17       	cp	r26, r18
    417e:	b3 07       	cpc	r27, r19
    4180:	e4 07       	cpc	r30, r20
    4182:	f5 07       	cpc	r31, r21
    4184:	20 f0       	brcs	.+8      	; 0x418e <__udivmodsi4_ep>
    4186:	a2 1b       	sub	r26, r18
    4188:	b3 0b       	sbc	r27, r19
    418a:	e4 0b       	sbc	r30, r20
    418c:	f5 0b       	sbc	r31, r21

0000418e <__udivmodsi4_ep>:
    418e:	66 1f       	adc	r22, r22
    4190:	77 1f       	adc	r23, r23
    4192:	88 1f       	adc	r24, r24
    4194:	99 1f       	adc	r25, r25
    4196:	1a 94       	dec	r1
    4198:	69 f7       	brne	.-38     	; 0x4174 <__udivmodsi4_loop>
    419a:	60 95       	com	r22
    419c:	70 95       	com	r23
    419e:	80 95       	com	r24
    41a0:	90 95       	com	r25
    41a2:	9b 01       	movw	r18, r22
    41a4:	ac 01       	movw	r20, r24
    41a6:	bd 01       	movw	r22, r26
    41a8:	cf 01       	movw	r24, r30
    41aa:	08 95       	ret

000041ac <__prologue_saves__>:
    41ac:	2f 92       	push	r2
    41ae:	3f 92       	push	r3
    41b0:	4f 92       	push	r4
    41b2:	5f 92       	push	r5
    41b4:	6f 92       	push	r6
    41b6:	7f 92       	push	r7
    41b8:	8f 92       	push	r8
    41ba:	9f 92       	push	r9
    41bc:	af 92       	push	r10
    41be:	bf 92       	push	r11
    41c0:	cf 92       	push	r12
    41c2:	df 92       	push	r13
    41c4:	ef 92       	push	r14
    41c6:	ff 92       	push	r15
    41c8:	0f 93       	push	r16
    41ca:	1f 93       	push	r17
    41cc:	cf 93       	push	r28
    41ce:	df 93       	push	r29
    41d0:	cd b7       	in	r28, 0x3d	; 61
    41d2:	de b7       	in	r29, 0x3e	; 62
    41d4:	ca 1b       	sub	r28, r26
    41d6:	db 0b       	sbc	r29, r27
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	f8 94       	cli
    41dc:	de bf       	out	0x3e, r29	; 62
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	09 94       	ijmp

000041e4 <__epilogue_restores__>:
    41e4:	2a 88       	ldd	r2, Y+18	; 0x12
    41e6:	39 88       	ldd	r3, Y+17	; 0x11
    41e8:	48 88       	ldd	r4, Y+16	; 0x10
    41ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    41ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    41ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    41f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    41f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    41f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    41f6:	b9 84       	ldd	r11, Y+9	; 0x09
    41f8:	c8 84       	ldd	r12, Y+8	; 0x08
    41fa:	df 80       	ldd	r13, Y+7	; 0x07
    41fc:	ee 80       	ldd	r14, Y+6	; 0x06
    41fe:	fd 80       	ldd	r15, Y+5	; 0x05
    4200:	0c 81       	ldd	r16, Y+4	; 0x04
    4202:	1b 81       	ldd	r17, Y+3	; 0x03
    4204:	aa 81       	ldd	r26, Y+2	; 0x02
    4206:	b9 81       	ldd	r27, Y+1	; 0x01
    4208:	ce 0f       	add	r28, r30
    420a:	d1 1d       	adc	r29, r1
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	ed 01       	movw	r28, r26
    4218:	08 95       	ret

0000421a <itoa>:
    421a:	fb 01       	movw	r30, r22
    421c:	9f 01       	movw	r18, r30
    421e:	e8 94       	clt
    4220:	42 30       	cpi	r20, 0x02	; 2
    4222:	c4 f0       	brlt	.+48     	; 0x4254 <itoa+0x3a>
    4224:	45 32       	cpi	r20, 0x25	; 37
    4226:	b4 f4       	brge	.+44     	; 0x4254 <itoa+0x3a>
    4228:	4a 30       	cpi	r20, 0x0A	; 10
    422a:	29 f4       	brne	.+10     	; 0x4236 <itoa+0x1c>
    422c:	97 fb       	bst	r25, 7
    422e:	1e f4       	brtc	.+6      	; 0x4236 <itoa+0x1c>
    4230:	90 95       	com	r25
    4232:	81 95       	neg	r24
    4234:	9f 4f       	sbci	r25, 0xFF	; 255
    4236:	64 2f       	mov	r22, r20
    4238:	77 27       	eor	r23, r23
    423a:	0e 94 8d 20 	call	0x411a	; 0x411a <__udivmodhi4>
    423e:	80 5d       	subi	r24, 0xD0	; 208
    4240:	8a 33       	cpi	r24, 0x3A	; 58
    4242:	0c f0       	brlt	.+2      	; 0x4246 <itoa+0x2c>
    4244:	89 5d       	subi	r24, 0xD9	; 217
    4246:	81 93       	st	Z+, r24
    4248:	cb 01       	movw	r24, r22
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	a1 f7       	brne	.-24     	; 0x4236 <itoa+0x1c>
    424e:	16 f4       	brtc	.+4      	; 0x4254 <itoa+0x3a>
    4250:	5d e2       	ldi	r21, 0x2D	; 45
    4252:	51 93       	st	Z+, r21
    4254:	10 82       	st	Z, r1
    4256:	c9 01       	movw	r24, r18
    4258:	0c 94 2e 21 	jmp	0x425c	; 0x425c <strrev>

0000425c <strrev>:
    425c:	dc 01       	movw	r26, r24
    425e:	fc 01       	movw	r30, r24
    4260:	67 2f       	mov	r22, r23
    4262:	71 91       	ld	r23, Z+
    4264:	77 23       	and	r23, r23
    4266:	e1 f7       	brne	.-8      	; 0x4260 <strrev+0x4>
    4268:	32 97       	sbiw	r30, 0x02	; 2
    426a:	04 c0       	rjmp	.+8      	; 0x4274 <strrev+0x18>
    426c:	7c 91       	ld	r23, X
    426e:	6d 93       	st	X+, r22
    4270:	70 83       	st	Z, r23
    4272:	62 91       	ld	r22, -Z
    4274:	ae 17       	cp	r26, r30
    4276:	bf 07       	cpc	r27, r31
    4278:	c8 f3       	brcs	.-14     	; 0x426c <strrev+0x10>
    427a:	08 95       	ret

0000427c <_exit>:
    427c:	f8 94       	cli

0000427e <__stop_program>:
    427e:	ff cf       	rjmp	.-2      	; 0x427e <__stop_program>
